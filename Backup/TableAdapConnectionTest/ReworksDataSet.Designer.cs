//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PlantConfig {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ReworksDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ReworksDataSet : System.Data.DataSet {
        
        private ControllerDataTable tableController;
        
        private ControlPointDataTable tableControlPoint;
        
        private LockerDataTable tableLocker;
        
        private PlantDataTable tablePlant;
        
        private RepairZoneDataTable tableRepairZone;
        
        private ScanerDataTable tableScaner;
        
        private SensorDataTable tableSensor;
        
        private TerminalDataTable tableTerminal;
        
        private DeviceTypeDataTable tableDeviceType;
        
        private TermModesDataTable tableTermModes;
        
        private System.Data.DataRelation relationPlantCont;
        
        private System.Data.DataRelation relationRzCp;
        
        private System.Data.DataRelation relationContLock;
        
        private System.Data.DataRelation relationCpLock;
        
        private System.Data.DataRelation relationPlantRz;
        
        private System.Data.DataRelation relationCpScan;
        
        private System.Data.DataRelation relationContScan;
        
        private System.Data.DataRelation relationContSens;
        
        private System.Data.DataRelation relationCpSens;
        
        private System.Data.DataRelation relationRzTerm;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReworksDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ReworksDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Controller"] != null)) {
                    base.Tables.Add(new ControllerDataTable(ds.Tables["Controller"]));
                }
                if ((ds.Tables["ControlPoint"] != null)) {
                    base.Tables.Add(new ControlPointDataTable(ds.Tables["ControlPoint"]));
                }
                if ((ds.Tables["Locker"] != null)) {
                    base.Tables.Add(new LockerDataTable(ds.Tables["Locker"]));
                }
                if ((ds.Tables["Plant"] != null)) {
                    base.Tables.Add(new PlantDataTable(ds.Tables["Plant"]));
                }
                if ((ds.Tables["RepairZone"] != null)) {
                    base.Tables.Add(new RepairZoneDataTable(ds.Tables["RepairZone"]));
                }
                if ((ds.Tables["Scaner"] != null)) {
                    base.Tables.Add(new ScanerDataTable(ds.Tables["Scaner"]));
                }
                if ((ds.Tables["Sensor"] != null)) {
                    base.Tables.Add(new SensorDataTable(ds.Tables["Sensor"]));
                }
                if ((ds.Tables["Terminal"] != null)) {
                    base.Tables.Add(new TerminalDataTable(ds.Tables["Terminal"]));
                }
                if ((ds.Tables["DeviceType"] != null)) {
                    base.Tables.Add(new DeviceTypeDataTable(ds.Tables["DeviceType"]));
                }
                if ((ds.Tables["TermModes"] != null)) {
                    base.Tables.Add(new TermModesDataTable(ds.Tables["TermModes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ControllerDataTable Controller {
            get {
                return this.tableController;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ControlPointDataTable ControlPoint {
            get {
                return this.tableControlPoint;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LockerDataTable Locker {
            get {
                return this.tableLocker;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlantDataTable Plant {
            get {
                return this.tablePlant;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RepairZoneDataTable RepairZone {
            get {
                return this.tableRepairZone;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScanerDataTable Scaner {
            get {
                return this.tableScaner;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SensorDataTable Sensor {
            get {
                return this.tableSensor;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TerminalDataTable Terminal {
            get {
                return this.tableTerminal;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeviceTypeDataTable DeviceType {
            get {
                return this.tableDeviceType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TermModesDataTable TermModes {
            get {
                return this.tableTermModes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ReworksDataSet cln = ((ReworksDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Controller"] != null)) {
                    base.Tables.Add(new ControllerDataTable(ds.Tables["Controller"]));
                }
                if ((ds.Tables["ControlPoint"] != null)) {
                    base.Tables.Add(new ControlPointDataTable(ds.Tables["ControlPoint"]));
                }
                if ((ds.Tables["Locker"] != null)) {
                    base.Tables.Add(new LockerDataTable(ds.Tables["Locker"]));
                }
                if ((ds.Tables["Plant"] != null)) {
                    base.Tables.Add(new PlantDataTable(ds.Tables["Plant"]));
                }
                if ((ds.Tables["RepairZone"] != null)) {
                    base.Tables.Add(new RepairZoneDataTable(ds.Tables["RepairZone"]));
                }
                if ((ds.Tables["Scaner"] != null)) {
                    base.Tables.Add(new ScanerDataTable(ds.Tables["Scaner"]));
                }
                if ((ds.Tables["Sensor"] != null)) {
                    base.Tables.Add(new SensorDataTable(ds.Tables["Sensor"]));
                }
                if ((ds.Tables["Terminal"] != null)) {
                    base.Tables.Add(new TerminalDataTable(ds.Tables["Terminal"]));
                }
                if ((ds.Tables["DeviceType"] != null)) {
                    base.Tables.Add(new DeviceTypeDataTable(ds.Tables["DeviceType"]));
                }
                if ((ds.Tables["TermModes"] != null)) {
                    base.Tables.Add(new TermModesDataTable(ds.Tables["TermModes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableController = ((ControllerDataTable)(base.Tables["Controller"]));
            if ((initTable == true)) {
                if ((this.tableController != null)) {
                    this.tableController.InitVars();
                }
            }
            this.tableControlPoint = ((ControlPointDataTable)(base.Tables["ControlPoint"]));
            if ((initTable == true)) {
                if ((this.tableControlPoint != null)) {
                    this.tableControlPoint.InitVars();
                }
            }
            this.tableLocker = ((LockerDataTable)(base.Tables["Locker"]));
            if ((initTable == true)) {
                if ((this.tableLocker != null)) {
                    this.tableLocker.InitVars();
                }
            }
            this.tablePlant = ((PlantDataTable)(base.Tables["Plant"]));
            if ((initTable == true)) {
                if ((this.tablePlant != null)) {
                    this.tablePlant.InitVars();
                }
            }
            this.tableRepairZone = ((RepairZoneDataTable)(base.Tables["RepairZone"]));
            if ((initTable == true)) {
                if ((this.tableRepairZone != null)) {
                    this.tableRepairZone.InitVars();
                }
            }
            this.tableScaner = ((ScanerDataTable)(base.Tables["Scaner"]));
            if ((initTable == true)) {
                if ((this.tableScaner != null)) {
                    this.tableScaner.InitVars();
                }
            }
            this.tableSensor = ((SensorDataTable)(base.Tables["Sensor"]));
            if ((initTable == true)) {
                if ((this.tableSensor != null)) {
                    this.tableSensor.InitVars();
                }
            }
            this.tableTerminal = ((TerminalDataTable)(base.Tables["Terminal"]));
            if ((initTable == true)) {
                if ((this.tableTerminal != null)) {
                    this.tableTerminal.InitVars();
                }
            }
            this.tableDeviceType = ((DeviceTypeDataTable)(base.Tables["DeviceType"]));
            if ((initTable == true)) {
                if ((this.tableDeviceType != null)) {
                    this.tableDeviceType.InitVars();
                }
            }
            this.tableTermModes = ((TermModesDataTable)(base.Tables["TermModes"]));
            if ((initTable == true)) {
                if ((this.tableTermModes != null)) {
                    this.tableTermModes.InitVars();
                }
            }
            this.relationPlantCont = this.Relations["PlantCont"];
            this.relationRzCp = this.Relations["RzCp"];
            this.relationContLock = this.Relations["ContLock"];
            this.relationCpLock = this.Relations["CpLock"];
            this.relationPlantRz = this.Relations["PlantRz"];
            this.relationCpScan = this.Relations["CpScan"];
            this.relationContScan = this.Relations["ContScan"];
            this.relationContSens = this.Relations["ContSens"];
            this.relationCpSens = this.Relations["CpSens"];
            this.relationRzTerm = this.Relations["RzTerm"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ReworksDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsReworks.xsd";
            this.Locale = new System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableController = new ControllerDataTable();
            base.Tables.Add(this.tableController);
            this.tableControlPoint = new ControlPointDataTable();
            base.Tables.Add(this.tableControlPoint);
            this.tableLocker = new LockerDataTable();
            base.Tables.Add(this.tableLocker);
            this.tablePlant = new PlantDataTable();
            base.Tables.Add(this.tablePlant);
            this.tableRepairZone = new RepairZoneDataTable();
            base.Tables.Add(this.tableRepairZone);
            this.tableScaner = new ScanerDataTable();
            base.Tables.Add(this.tableScaner);
            this.tableSensor = new SensorDataTable();
            base.Tables.Add(this.tableSensor);
            this.tableTerminal = new TerminalDataTable();
            base.Tables.Add(this.tableTerminal);
            this.tableDeviceType = new DeviceTypeDataTable();
            base.Tables.Add(this.tableDeviceType);
            this.tableTermModes = new TermModesDataTable();
            base.Tables.Add(this.tableTermModes);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("PlantCont", new System.Data.DataColumn[] {
                        this.tablePlant.PlantIdColumn}, new System.Data.DataColumn[] {
                        this.tableController.PlantIdColumn});
            this.tableController.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("RzCp", new System.Data.DataColumn[] {
                        this.tableRepairZone.RepZoneIdColumn}, new System.Data.DataColumn[] {
                        this.tableControlPoint.RepZoneIdColumn});
            this.tableControlPoint.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ContLock", new System.Data.DataColumn[] {
                        this.tableController.ContIdColumn}, new System.Data.DataColumn[] {
                        this.tableLocker.ContIdColumn});
            this.tableLocker.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("CpLock", new System.Data.DataColumn[] {
                        this.tableControlPoint.ContPointIdColumn}, new System.Data.DataColumn[] {
                        this.tableLocker.ContPointIdColumn});
            this.tableLocker.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("PlantRz", new System.Data.DataColumn[] {
                        this.tablePlant.PlantIdColumn}, new System.Data.DataColumn[] {
                        this.tableRepairZone.PlantIdColumn});
            this.tableRepairZone.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("CpScan", new System.Data.DataColumn[] {
                        this.tableControlPoint.ContPointIdColumn}, new System.Data.DataColumn[] {
                        this.tableScaner.ContPointIdColumn});
            this.tableScaner.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ContScan", new System.Data.DataColumn[] {
                        this.tableController.ContIdColumn}, new System.Data.DataColumn[] {
                        this.tableScaner.ContIdColumn});
            this.tableScaner.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ContSens", new System.Data.DataColumn[] {
                        this.tableController.ContIdColumn}, new System.Data.DataColumn[] {
                        this.tableSensor.ContIdColumn});
            this.tableSensor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("CpSens", new System.Data.DataColumn[] {
                        this.tableControlPoint.ContPointIdColumn}, new System.Data.DataColumn[] {
                        this.tableSensor.ContPointIdColumn});
            this.tableSensor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("RzTerm", new System.Data.DataColumn[] {
                        this.tableRepairZone.RepZoneIdColumn}, new System.Data.DataColumn[] {
                        this.tableTerminal.RepZoneIdColumn});
            this.tableTerminal.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationPlantCont = new System.Data.DataRelation("PlantCont", new System.Data.DataColumn[] {
                        this.tablePlant.PlantIdColumn}, new System.Data.DataColumn[] {
                        this.tableController.PlantIdColumn}, false);
            this.Relations.Add(this.relationPlantCont);
            this.relationRzCp = new System.Data.DataRelation("RzCp", new System.Data.DataColumn[] {
                        this.tableRepairZone.RepZoneIdColumn}, new System.Data.DataColumn[] {
                        this.tableControlPoint.RepZoneIdColumn}, false);
            this.Relations.Add(this.relationRzCp);
            this.relationContLock = new System.Data.DataRelation("ContLock", new System.Data.DataColumn[] {
                        this.tableController.ContIdColumn}, new System.Data.DataColumn[] {
                        this.tableLocker.ContIdColumn}, false);
            this.Relations.Add(this.relationContLock);
            this.relationCpLock = new System.Data.DataRelation("CpLock", new System.Data.DataColumn[] {
                        this.tableControlPoint.ContPointIdColumn}, new System.Data.DataColumn[] {
                        this.tableLocker.ContPointIdColumn}, false);
            this.Relations.Add(this.relationCpLock);
            this.relationPlantRz = new System.Data.DataRelation("PlantRz", new System.Data.DataColumn[] {
                        this.tablePlant.PlantIdColumn}, new System.Data.DataColumn[] {
                        this.tableRepairZone.PlantIdColumn}, false);
            this.Relations.Add(this.relationPlantRz);
            this.relationCpScan = new System.Data.DataRelation("CpScan", new System.Data.DataColumn[] {
                        this.tableControlPoint.ContPointIdColumn}, new System.Data.DataColumn[] {
                        this.tableScaner.ContPointIdColumn}, false);
            this.Relations.Add(this.relationCpScan);
            this.relationContScan = new System.Data.DataRelation("ContScan", new System.Data.DataColumn[] {
                        this.tableController.ContIdColumn}, new System.Data.DataColumn[] {
                        this.tableScaner.ContIdColumn}, false);
            this.Relations.Add(this.relationContScan);
            this.relationContSens = new System.Data.DataRelation("ContSens", new System.Data.DataColumn[] {
                        this.tableController.ContIdColumn}, new System.Data.DataColumn[] {
                        this.tableSensor.ContIdColumn}, false);
            this.Relations.Add(this.relationContSens);
            this.relationCpSens = new System.Data.DataRelation("CpSens", new System.Data.DataColumn[] {
                        this.tableControlPoint.ContPointIdColumn}, new System.Data.DataColumn[] {
                        this.tableSensor.ContPointIdColumn}, false);
            this.Relations.Add(this.relationCpSens);
            this.relationRzTerm = new System.Data.DataRelation("RzTerm", new System.Data.DataColumn[] {
                        this.tableRepairZone.RepZoneIdColumn}, new System.Data.DataColumn[] {
                        this.tableTerminal.RepZoneIdColumn}, false);
            this.Relations.Add(this.relationRzTerm);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeController() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeControlPoint() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLocker() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePlant() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRepairZone() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScaner() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSensor() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTerminal() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDeviceType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTermModes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ReworksDataSet ds = new ReworksDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ControllerRowChangeEventHandler(object sender, ControllerRowChangeEvent e);
        
        public delegate void ControlPointRowChangeEventHandler(object sender, ControlPointRowChangeEvent e);
        
        public delegate void LockerRowChangeEventHandler(object sender, LockerRowChangeEvent e);
        
        public delegate void PlantRowChangeEventHandler(object sender, PlantRowChangeEvent e);
        
        public delegate void RepairZoneRowChangeEventHandler(object sender, RepairZoneRowChangeEvent e);
        
        public delegate void ScanerRowChangeEventHandler(object sender, ScanerRowChangeEvent e);
        
        public delegate void SensorRowChangeEventHandler(object sender, SensorRowChangeEvent e);
        
        public delegate void TerminalRowChangeEventHandler(object sender, TerminalRowChangeEvent e);
        
        public delegate void DeviceTypeRowChangeEventHandler(object sender, DeviceTypeRowChangeEvent e);
        
        public delegate void TermModesRowChangeEventHandler(object sender, TermModesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ControllerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnContId;
            
            private System.Data.DataColumn columnPlantId;
            
            private System.Data.DataColumn columnContName;
            
            private System.Data.DataColumn columnContIp;
            
            private System.Data.DataColumn columnContPosX;
            
            private System.Data.DataColumn columnContPosY;
            
            private System.Data.DataColumn columnInputCoilStartAddress;
            
            private System.Data.DataColumn columnInputCoilUnitCount;
            
            private System.Data.DataColumn columnOutputCoilStartAddress;
            
            private System.Data.DataColumn columnOutputCoilUnitCount;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControllerDataTable() {
                this.TableName = "Controller";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ControllerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ControllerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContIdColumn {
                get {
                    return this.columnContId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantIdColumn {
                get {
                    return this.columnPlantId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContNameColumn {
                get {
                    return this.columnContName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContIpColumn {
                get {
                    return this.columnContIp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContPosXColumn {
                get {
                    return this.columnContPosX;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContPosYColumn {
                get {
                    return this.columnContPosY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InputCoilStartAddressColumn {
                get {
                    return this.columnInputCoilStartAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InputCoilUnitCountColumn {
                get {
                    return this.columnInputCoilUnitCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OutputCoilStartAddressColumn {
                get {
                    return this.columnOutputCoilStartAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OutputCoilUnitCountColumn {
                get {
                    return this.columnOutputCoilUnitCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControllerRow this[int index] {
                get {
                    return ((ControllerRow)(this.Rows[index]));
                }
            }
            
            public event ControllerRowChangeEventHandler ControllerRowChanging;
            
            public event ControllerRowChangeEventHandler ControllerRowChanged;
            
            public event ControllerRowChangeEventHandler ControllerRowDeleting;
            
            public event ControllerRowChangeEventHandler ControllerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddControllerRow(ControllerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControllerRow AddControllerRow(PlantRow parentPlantRowByPlantCont, string ContName, string ContIp, decimal ContPosX, decimal ContPosY, decimal InputCoilStartAddress, decimal InputCoilUnitCount, decimal OutputCoilStartAddress, decimal OutputCoilUnitCount) {
                ControllerRow rowControllerRow = ((ControllerRow)(this.NewRow()));
                rowControllerRow.ItemArray = new object[] {
                        null,
                        parentPlantRowByPlantCont[0],
                        ContName,
                        ContIp,
                        ContPosX,
                        ContPosY,
                        InputCoilStartAddress,
                        InputCoilUnitCount,
                        OutputCoilStartAddress,
                        OutputCoilUnitCount};
                this.Rows.Add(rowControllerRow);
                return rowControllerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControllerRow FindByContId(decimal ContId) {
                return ((ControllerRow)(this.Rows.Find(new object[] {
                            ContId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ControllerDataTable cln = ((ControllerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ControllerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContId = base.Columns["ContId"];
                this.columnPlantId = base.Columns["PlantId"];
                this.columnContName = base.Columns["ContName"];
                this.columnContIp = base.Columns["ContIp"];
                this.columnContPosX = base.Columns["ContPosX"];
                this.columnContPosY = base.Columns["ContPosY"];
                this.columnInputCoilStartAddress = base.Columns["InputCoilStartAddress"];
                this.columnInputCoilUnitCount = base.Columns["InputCoilUnitCount"];
                this.columnOutputCoilStartAddress = base.Columns["OutputCoilStartAddress"];
                this.columnOutputCoilUnitCount = base.Columns["OutputCoilUnitCount"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContId = new System.Data.DataColumn("ContId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContId);
                this.columnPlantId = new System.Data.DataColumn("PlantId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantId);
                this.columnContName = new System.Data.DataColumn("ContName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContName);
                this.columnContIp = new System.Data.DataColumn("ContIp", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContIp);
                this.columnContPosX = new System.Data.DataColumn("ContPosX", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContPosX);
                this.columnContPosY = new System.Data.DataColumn("ContPosY", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContPosY);
                this.columnInputCoilStartAddress = new System.Data.DataColumn("InputCoilStartAddress", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputCoilStartAddress);
                this.columnInputCoilUnitCount = new System.Data.DataColumn("InputCoilUnitCount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputCoilUnitCount);
                this.columnOutputCoilStartAddress = new System.Data.DataColumn("OutputCoilStartAddress", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutputCoilStartAddress);
                this.columnOutputCoilUnitCount = new System.Data.DataColumn("OutputCoilUnitCount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutputCoilUnitCount);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnContId}, true));
                this.columnContId.AutoIncrement = true;
                this.columnContId.AllowDBNull = false;
                this.columnContId.Unique = true;
                this.columnPlantId.AllowDBNull = false;
                this.columnContName.AllowDBNull = false;
                this.columnContName.MaxLength = 40;
                this.columnContIp.AllowDBNull = false;
                this.columnContIp.MaxLength = 15;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControllerRow NewControllerRow() {
                return ((ControllerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ControllerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ControllerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ControllerRowChanged != null)) {
                    this.ControllerRowChanged(this, new ControllerRowChangeEvent(((ControllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ControllerRowChanging != null)) {
                    this.ControllerRowChanging(this, new ControllerRowChangeEvent(((ControllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ControllerRowDeleted != null)) {
                    this.ControllerRowDeleted(this, new ControllerRowChangeEvent(((ControllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ControllerRowDeleting != null)) {
                    this.ControllerRowDeleting(this, new ControllerRowChangeEvent(((ControllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveControllerRow(ControllerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDataSet ds = new ReworksDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ControllerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ControlPointDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnContPointId;
            
            private System.Data.DataColumn columnRepZoneId;
            
            private System.Data.DataColumn columnContPointName;
            
            private System.Data.DataColumn columnContPointType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlPointDataTable() {
                this.TableName = "ControlPoint";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ControlPointDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ControlPointDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContPointIdColumn {
                get {
                    return this.columnContPointId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepZoneIdColumn {
                get {
                    return this.columnRepZoneId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContPointNameColumn {
                get {
                    return this.columnContPointName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContPointTypeColumn {
                get {
                    return this.columnContPointType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlPointRow this[int index] {
                get {
                    return ((ControlPointRow)(this.Rows[index]));
                }
            }
            
            public event ControlPointRowChangeEventHandler ControlPointRowChanging;
            
            public event ControlPointRowChangeEventHandler ControlPointRowChanged;
            
            public event ControlPointRowChangeEventHandler ControlPointRowDeleting;
            
            public event ControlPointRowChangeEventHandler ControlPointRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddControlPointRow(ControlPointRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlPointRow AddControlPointRow(RepairZoneRow parentRepairZoneRowByRzCp, string ContPointName, decimal ContPointType) {
                ControlPointRow rowControlPointRow = ((ControlPointRow)(this.NewRow()));
                rowControlPointRow.ItemArray = new object[] {
                        null,
                        parentRepairZoneRowByRzCp[0],
                        ContPointName,
                        ContPointType};
                this.Rows.Add(rowControlPointRow);
                return rowControlPointRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlPointRow FindByContPointId(decimal ContPointId) {
                return ((ControlPointRow)(this.Rows.Find(new object[] {
                            ContPointId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ControlPointDataTable cln = ((ControlPointDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ControlPointDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContPointId = base.Columns["ContPointId"];
                this.columnRepZoneId = base.Columns["RepZoneId"];
                this.columnContPointName = base.Columns["ContPointName"];
                this.columnContPointType = base.Columns["ContPointType"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContPointId = new System.Data.DataColumn("ContPointId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContPointId);
                this.columnRepZoneId = new System.Data.DataColumn("RepZoneId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepZoneId);
                this.columnContPointName = new System.Data.DataColumn("ContPointName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContPointName);
                this.columnContPointType = new System.Data.DataColumn("ContPointType", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContPointType);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnContPointId}, true));
                this.columnContPointId.AutoIncrement = true;
                this.columnContPointId.AllowDBNull = false;
                this.columnContPointId.Unique = true;
                this.columnRepZoneId.AllowDBNull = false;
                this.columnContPointName.MaxLength = 40;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlPointRow NewControlPointRow() {
                return ((ControlPointRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ControlPointRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ControlPointRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ControlPointRowChanged != null)) {
                    this.ControlPointRowChanged(this, new ControlPointRowChangeEvent(((ControlPointRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ControlPointRowChanging != null)) {
                    this.ControlPointRowChanging(this, new ControlPointRowChangeEvent(((ControlPointRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ControlPointRowDeleted != null)) {
                    this.ControlPointRowDeleted(this, new ControlPointRowChangeEvent(((ControlPointRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ControlPointRowDeleting != null)) {
                    this.ControlPointRowDeleting(this, new ControlPointRowChangeEvent(((ControlPointRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveControlPointRow(ControlPointRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDataSet ds = new ReworksDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ControlPointDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LockerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLocId;
            
            private System.Data.DataColumn columnContId;
            
            private System.Data.DataColumn columnContPointId;
            
            private System.Data.DataColumn columnLocType;
            
            private System.Data.DataColumn columnLocAddress;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerDataTable() {
                this.TableName = "Locker";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LockerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LockerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LocIdColumn {
                get {
                    return this.columnLocId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContIdColumn {
                get {
                    return this.columnContId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContPointIdColumn {
                get {
                    return this.columnContPointId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LocTypeColumn {
                get {
                    return this.columnLocType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LocAddressColumn {
                get {
                    return this.columnLocAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow this[int index] {
                get {
                    return ((LockerRow)(this.Rows[index]));
                }
            }
            
            public event LockerRowChangeEventHandler LockerRowChanging;
            
            public event LockerRowChangeEventHandler LockerRowChanged;
            
            public event LockerRowChangeEventHandler LockerRowDeleting;
            
            public event LockerRowChangeEventHandler LockerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLockerRow(LockerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow AddLockerRow(ControllerRow parentControllerRowByContLock, ControlPointRow parentControlPointRowByCpLock, decimal LocType, decimal LocAddress) {
                LockerRow rowLockerRow = ((LockerRow)(this.NewRow()));
                rowLockerRow.ItemArray = new object[] {
                        null,
                        parentControllerRowByContLock[0],
                        parentControlPointRowByCpLock[0],
                        LocType,
                        LocAddress};
                this.Rows.Add(rowLockerRow);
                return rowLockerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow FindByLocId(decimal LocId) {
                return ((LockerRow)(this.Rows.Find(new object[] {
                            LocId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LockerDataTable cln = ((LockerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LockerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLocId = base.Columns["LocId"];
                this.columnContId = base.Columns["ContId"];
                this.columnContPointId = base.Columns["ContPointId"];
                this.columnLocType = base.Columns["LocType"];
                this.columnLocAddress = base.Columns["LocAddress"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLocId = new System.Data.DataColumn("LocId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocId);
                this.columnContId = new System.Data.DataColumn("ContId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContId);
                this.columnContPointId = new System.Data.DataColumn("ContPointId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContPointId);
                this.columnLocType = new System.Data.DataColumn("LocType", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocType);
                this.columnLocAddress = new System.Data.DataColumn("LocAddress", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocAddress);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLocId}, true));
                this.columnLocId.AutoIncrement = true;
                this.columnLocId.AllowDBNull = false;
                this.columnLocId.Unique = true;
                this.columnContId.AllowDBNull = false;
                this.columnContPointId.AllowDBNull = false;
                this.columnLocType.AllowDBNull = false;
                this.columnLocAddress.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow NewLockerRow() {
                return ((LockerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LockerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LockerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LockerRowChanged != null)) {
                    this.LockerRowChanged(this, new LockerRowChangeEvent(((LockerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LockerRowChanging != null)) {
                    this.LockerRowChanging(this, new LockerRowChangeEvent(((LockerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LockerRowDeleted != null)) {
                    this.LockerRowDeleted(this, new LockerRowChangeEvent(((LockerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LockerRowDeleting != null)) {
                    this.LockerRowDeleting(this, new LockerRowChangeEvent(((LockerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLockerRow(LockerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDataSet ds = new ReworksDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LockerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlantDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPlantId;
            
            private System.Data.DataColumn columnPlantName;
            
            private System.Data.DataColumn columnPlantNameEng;
            
            private System.Data.DataColumn columnPlantCorpId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantDataTable() {
                this.TableName = "Plant";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlantDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PlantDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantIdColumn {
                get {
                    return this.columnPlantId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantNameColumn {
                get {
                    return this.columnPlantName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantNameEngColumn {
                get {
                    return this.columnPlantNameEng;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantCorpIdColumn {
                get {
                    return this.columnPlantCorpId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow this[int index] {
                get {
                    return ((PlantRow)(this.Rows[index]));
                }
            }
            
            public event PlantRowChangeEventHandler PlantRowChanging;
            
            public event PlantRowChangeEventHandler PlantRowChanged;
            
            public event PlantRowChangeEventHandler PlantRowDeleting;
            
            public event PlantRowChangeEventHandler PlantRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPlantRow(PlantRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow AddPlantRow(string PlantName, string PlantNameEng, string PlantCorpId) {
                PlantRow rowPlantRow = ((PlantRow)(this.NewRow()));
                rowPlantRow.ItemArray = new object[] {
                        null,
                        PlantName,
                        PlantNameEng,
                        PlantCorpId};
                this.Rows.Add(rowPlantRow);
                return rowPlantRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow FindByPlantId(decimal PlantId) {
                return ((PlantRow)(this.Rows.Find(new object[] {
                            PlantId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PlantDataTable cln = ((PlantDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PlantDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPlantId = base.Columns["PlantId"];
                this.columnPlantName = base.Columns["PlantName"];
                this.columnPlantNameEng = base.Columns["PlantNameEng"];
                this.columnPlantCorpId = base.Columns["PlantCorpId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPlantId = new System.Data.DataColumn("PlantId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantId);
                this.columnPlantName = new System.Data.DataColumn("PlantName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantName);
                this.columnPlantNameEng = new System.Data.DataColumn("PlantNameEng", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantNameEng);
                this.columnPlantCorpId = new System.Data.DataColumn("PlantCorpId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantCorpId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPlantId}, true));
                this.columnPlantId.AutoIncrement = true;
                this.columnPlantId.AllowDBNull = false;
                this.columnPlantId.Unique = true;
                this.columnPlantName.AllowDBNull = false;
                this.columnPlantName.MaxLength = 40;
                this.columnPlantNameEng.MaxLength = 40;
                this.columnPlantCorpId.AllowDBNull = false;
                this.columnPlantCorpId.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow NewPlantRow() {
                return ((PlantRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PlantRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PlantRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlantRowChanged != null)) {
                    this.PlantRowChanged(this, new PlantRowChangeEvent(((PlantRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlantRowChanging != null)) {
                    this.PlantRowChanging(this, new PlantRowChangeEvent(((PlantRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlantRowDeleted != null)) {
                    this.PlantRowDeleted(this, new PlantRowChangeEvent(((PlantRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlantRowDeleting != null)) {
                    this.PlantRowDeleting(this, new PlantRowChangeEvent(((PlantRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePlantRow(PlantRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDataSet ds = new ReworksDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlantDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RepairZoneDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRepZoneId;
            
            private System.Data.DataColumn columnPlantId;
            
            private System.Data.DataColumn columnRepZoneName;
            
            private System.Data.DataColumn columnRepZoneNameEng;
            
            private System.Data.DataColumn columnRepZonePosX1;
            
            private System.Data.DataColumn columnRepZonePosY1;
            
            private System.Data.DataColumn columnRepZonePosX2;
            
            private System.Data.DataColumn columnRepZonePosY2;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepairZoneDataTable() {
                this.TableName = "RepairZone";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RepairZoneDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RepairZoneDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepZoneIdColumn {
                get {
                    return this.columnRepZoneId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlantIdColumn {
                get {
                    return this.columnPlantId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepZoneNameColumn {
                get {
                    return this.columnRepZoneName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepZoneNameEngColumn {
                get {
                    return this.columnRepZoneNameEng;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepZonePosX1Column {
                get {
                    return this.columnRepZonePosX1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepZonePosY1Column {
                get {
                    return this.columnRepZonePosY1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepZonePosX2Column {
                get {
                    return this.columnRepZonePosX2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepZonePosY2Column {
                get {
                    return this.columnRepZonePosY2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepairZoneRow this[int index] {
                get {
                    return ((RepairZoneRow)(this.Rows[index]));
                }
            }
            
            public event RepairZoneRowChangeEventHandler RepairZoneRowChanging;
            
            public event RepairZoneRowChangeEventHandler RepairZoneRowChanged;
            
            public event RepairZoneRowChangeEventHandler RepairZoneRowDeleting;
            
            public event RepairZoneRowChangeEventHandler RepairZoneRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRepairZoneRow(RepairZoneRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepairZoneRow AddRepairZoneRow(PlantRow parentPlantRowByPlantRz, string RepZoneName, string RepZoneNameEng, decimal RepZonePosX1, decimal RepZonePosY1, decimal RepZonePosX2, decimal RepZonePosY2) {
                RepairZoneRow rowRepairZoneRow = ((RepairZoneRow)(this.NewRow()));
                rowRepairZoneRow.ItemArray = new object[] {
                        null,
                        parentPlantRowByPlantRz[0],
                        RepZoneName,
                        RepZoneNameEng,
                        RepZonePosX1,
                        RepZonePosY1,
                        RepZonePosX2,
                        RepZonePosY2};
                this.Rows.Add(rowRepairZoneRow);
                return rowRepairZoneRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepairZoneRow FindByRepZoneId(decimal RepZoneId) {
                return ((RepairZoneRow)(this.Rows.Find(new object[] {
                            RepZoneId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RepairZoneDataTable cln = ((RepairZoneDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RepairZoneDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRepZoneId = base.Columns["RepZoneId"];
                this.columnPlantId = base.Columns["PlantId"];
                this.columnRepZoneName = base.Columns["RepZoneName"];
                this.columnRepZoneNameEng = base.Columns["RepZoneNameEng"];
                this.columnRepZonePosX1 = base.Columns["RepZonePosX1"];
                this.columnRepZonePosY1 = base.Columns["RepZonePosY1"];
                this.columnRepZonePosX2 = base.Columns["RepZonePosX2"];
                this.columnRepZonePosY2 = base.Columns["RepZonePosY2"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRepZoneId = new System.Data.DataColumn("RepZoneId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepZoneId);
                this.columnPlantId = new System.Data.DataColumn("PlantId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantId);
                this.columnRepZoneName = new System.Data.DataColumn("RepZoneName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepZoneName);
                this.columnRepZoneNameEng = new System.Data.DataColumn("RepZoneNameEng", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepZoneNameEng);
                this.columnRepZonePosX1 = new System.Data.DataColumn("RepZonePosX1", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepZonePosX1);
                this.columnRepZonePosY1 = new System.Data.DataColumn("RepZonePosY1", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepZonePosY1);
                this.columnRepZonePosX2 = new System.Data.DataColumn("RepZonePosX2", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepZonePosX2);
                this.columnRepZonePosY2 = new System.Data.DataColumn("RepZonePosY2", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepZonePosY2);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnRepZoneId}, true));
                this.columnRepZoneId.AutoIncrement = true;
                this.columnRepZoneId.AllowDBNull = false;
                this.columnRepZoneId.Unique = true;
                this.columnPlantId.AllowDBNull = false;
                this.columnRepZoneName.AllowDBNull = false;
                this.columnRepZoneName.MaxLength = 40;
                this.columnRepZoneNameEng.MaxLength = 40;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepairZoneRow NewRepairZoneRow() {
                return ((RepairZoneRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RepairZoneRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RepairZoneRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RepairZoneRowChanged != null)) {
                    this.RepairZoneRowChanged(this, new RepairZoneRowChangeEvent(((RepairZoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RepairZoneRowChanging != null)) {
                    this.RepairZoneRowChanging(this, new RepairZoneRowChangeEvent(((RepairZoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RepairZoneRowDeleted != null)) {
                    this.RepairZoneRowDeleted(this, new RepairZoneRowChangeEvent(((RepairZoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RepairZoneRowDeleting != null)) {
                    this.RepairZoneRowDeleting(this, new RepairZoneRowChangeEvent(((RepairZoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRepairZoneRow(RepairZoneRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDataSet ds = new ReworksDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RepairZoneDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScanerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnScanId;
            
            private System.Data.DataColumn columnContPointId;
            
            private System.Data.DataColumn columnContId;
            
            private System.Data.DataColumn columnScanName;
            
            private System.Data.DataColumn columnScanType;
            
            private System.Data.DataColumn columnScanAddress;
            
            private System.Data.DataColumn columnScanPosX;
            
            private System.Data.DataColumn columnScanPosY;
            
            private System.Data.DataColumn columnScanDataPort;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanerDataTable() {
                this.TableName = "Scaner";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScanerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScanerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScanIdColumn {
                get {
                    return this.columnScanId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContPointIdColumn {
                get {
                    return this.columnContPointId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContIdColumn {
                get {
                    return this.columnContId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScanNameColumn {
                get {
                    return this.columnScanName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScanTypeColumn {
                get {
                    return this.columnScanType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScanAddressColumn {
                get {
                    return this.columnScanAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScanPosXColumn {
                get {
                    return this.columnScanPosX;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScanPosYColumn {
                get {
                    return this.columnScanPosY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScanDataPortColumn {
                get {
                    return this.columnScanDataPort;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanerRow this[int index] {
                get {
                    return ((ScanerRow)(this.Rows[index]));
                }
            }
            
            public event ScanerRowChangeEventHandler ScanerRowChanging;
            
            public event ScanerRowChangeEventHandler ScanerRowChanged;
            
            public event ScanerRowChangeEventHandler ScanerRowDeleting;
            
            public event ScanerRowChangeEventHandler ScanerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScanerRow(ScanerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanerRow AddScanerRow(ControlPointRow parentControlPointRowByCpScan, ControllerRow parentControllerRowByContScan, string ScanName, decimal ScanType, decimal ScanAddress, decimal ScanPosX, decimal ScanPosY, decimal ScanDataPort) {
                ScanerRow rowScanerRow = ((ScanerRow)(this.NewRow()));
                rowScanerRow.ItemArray = new object[] {
                        null,
                        parentControlPointRowByCpScan[0],
                        parentControllerRowByContScan[0],
                        ScanName,
                        ScanType,
                        ScanAddress,
                        ScanPosX,
                        ScanPosY,
                        ScanDataPort};
                this.Rows.Add(rowScanerRow);
                return rowScanerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanerRow FindByScanId(decimal ScanId) {
                return ((ScanerRow)(this.Rows.Find(new object[] {
                            ScanId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ScanerDataTable cln = ((ScanerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ScanerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScanId = base.Columns["ScanId"];
                this.columnContPointId = base.Columns["ContPointId"];
                this.columnContId = base.Columns["ContId"];
                this.columnScanName = base.Columns["ScanName"];
                this.columnScanType = base.Columns["ScanType"];
                this.columnScanAddress = base.Columns["ScanAddress"];
                this.columnScanPosX = base.Columns["ScanPosX"];
                this.columnScanPosY = base.Columns["ScanPosY"];
                this.columnScanDataPort = base.Columns["ScanDataPort"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScanId = new System.Data.DataColumn("ScanId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanId);
                this.columnContPointId = new System.Data.DataColumn("ContPointId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContPointId);
                this.columnContId = new System.Data.DataColumn("ContId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContId);
                this.columnScanName = new System.Data.DataColumn("ScanName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanName);
                this.columnScanType = new System.Data.DataColumn("ScanType", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanType);
                this.columnScanAddress = new System.Data.DataColumn("ScanAddress", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanAddress);
                this.columnScanPosX = new System.Data.DataColumn("ScanPosX", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanPosX);
                this.columnScanPosY = new System.Data.DataColumn("ScanPosY", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanPosY);
                this.columnScanDataPort = new System.Data.DataColumn("ScanDataPort", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanDataPort);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnScanId}, true));
                this.columnScanId.AutoIncrement = true;
                this.columnScanId.AllowDBNull = false;
                this.columnScanId.Unique = true;
                this.columnContPointId.AllowDBNull = false;
                this.columnContId.AllowDBNull = false;
                this.columnScanName.AllowDBNull = false;
                this.columnScanName.MaxLength = 40;
                this.columnScanType.AllowDBNull = false;
                this.columnScanAddress.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanerRow NewScanerRow() {
                return ((ScanerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ScanerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ScanerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScanerRowChanged != null)) {
                    this.ScanerRowChanged(this, new ScanerRowChangeEvent(((ScanerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScanerRowChanging != null)) {
                    this.ScanerRowChanging(this, new ScanerRowChangeEvent(((ScanerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScanerRowDeleted != null)) {
                    this.ScanerRowDeleted(this, new ScanerRowChangeEvent(((ScanerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScanerRowDeleting != null)) {
                    this.ScanerRowDeleting(this, new ScanerRowChangeEvent(((ScanerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScanerRow(ScanerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDataSet ds = new ReworksDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScanerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SensorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSensId;
            
            private System.Data.DataColumn columnContPointId;
            
            private System.Data.DataColumn columnContId;
            
            private System.Data.DataColumn columnSensType;
            
            private System.Data.DataColumn columnSensAddress;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SensorDataTable() {
                this.TableName = "Sensor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SensorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SensorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SensIdColumn {
                get {
                    return this.columnSensId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContPointIdColumn {
                get {
                    return this.columnContPointId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContIdColumn {
                get {
                    return this.columnContId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SensTypeColumn {
                get {
                    return this.columnSensType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SensAddressColumn {
                get {
                    return this.columnSensAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SensorRow this[int index] {
                get {
                    return ((SensorRow)(this.Rows[index]));
                }
            }
            
            public event SensorRowChangeEventHandler SensorRowChanging;
            
            public event SensorRowChangeEventHandler SensorRowChanged;
            
            public event SensorRowChangeEventHandler SensorRowDeleting;
            
            public event SensorRowChangeEventHandler SensorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSensorRow(SensorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SensorRow AddSensorRow(ControlPointRow parentControlPointRowByCpSens, ControllerRow parentControllerRowByContSens, decimal SensType, decimal SensAddress) {
                SensorRow rowSensorRow = ((SensorRow)(this.NewRow()));
                rowSensorRow.ItemArray = new object[] {
                        null,
                        parentControlPointRowByCpSens[0],
                        parentControllerRowByContSens[0],
                        SensType,
                        SensAddress};
                this.Rows.Add(rowSensorRow);
                return rowSensorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SensorRow FindBySensId(decimal SensId) {
                return ((SensorRow)(this.Rows.Find(new object[] {
                            SensId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SensorDataTable cln = ((SensorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SensorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSensId = base.Columns["SensId"];
                this.columnContPointId = base.Columns["ContPointId"];
                this.columnContId = base.Columns["ContId"];
                this.columnSensType = base.Columns["SensType"];
                this.columnSensAddress = base.Columns["SensAddress"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSensId = new System.Data.DataColumn("SensId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSensId);
                this.columnContPointId = new System.Data.DataColumn("ContPointId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContPointId);
                this.columnContId = new System.Data.DataColumn("ContId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContId);
                this.columnSensType = new System.Data.DataColumn("SensType", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSensType);
                this.columnSensAddress = new System.Data.DataColumn("SensAddress", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSensAddress);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSensId}, true));
                this.columnSensId.AutoIncrement = true;
                this.columnSensId.AllowDBNull = false;
                this.columnSensId.Unique = true;
                this.columnContPointId.AllowDBNull = false;
                this.columnContId.AllowDBNull = false;
                this.columnSensType.AllowDBNull = false;
                this.columnSensAddress.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SensorRow NewSensorRow() {
                return ((SensorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SensorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SensorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SensorRowChanged != null)) {
                    this.SensorRowChanged(this, new SensorRowChangeEvent(((SensorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SensorRowChanging != null)) {
                    this.SensorRowChanging(this, new SensorRowChangeEvent(((SensorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SensorRowDeleted != null)) {
                    this.SensorRowDeleted(this, new SensorRowChangeEvent(((SensorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SensorRowDeleting != null)) {
                    this.SensorRowDeleting(this, new SensorRowChangeEvent(((SensorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSensorRow(SensorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDataSet ds = new ReworksDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SensorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TerminalDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTermId;
            
            private System.Data.DataColumn columnRepZoneId;
            
            private System.Data.DataColumn columnTermName;
            
            private System.Data.DataColumn columnTermIp;
            
            private System.Data.DataColumn columnTermPosX;
            
            private System.Data.DataColumn columnTermPosY;
            
            private System.Data.DataColumn columnTermMode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalDataTable() {
                this.TableName = "Terminal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TerminalDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TerminalDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TermIdColumn {
                get {
                    return this.columnTermId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepZoneIdColumn {
                get {
                    return this.columnRepZoneId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TermNameColumn {
                get {
                    return this.columnTermName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TermIpColumn {
                get {
                    return this.columnTermIp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TermPosXColumn {
                get {
                    return this.columnTermPosX;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TermPosYColumn {
                get {
                    return this.columnTermPosY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TermModeColumn {
                get {
                    return this.columnTermMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalRow this[int index] {
                get {
                    return ((TerminalRow)(this.Rows[index]));
                }
            }
            
            public event TerminalRowChangeEventHandler TerminalRowChanging;
            
            public event TerminalRowChangeEventHandler TerminalRowChanged;
            
            public event TerminalRowChangeEventHandler TerminalRowDeleting;
            
            public event TerminalRowChangeEventHandler TerminalRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTerminalRow(TerminalRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalRow AddTerminalRow(RepairZoneRow parentRepairZoneRowByRzTerm, string TermName, string TermIp, decimal TermPosX, decimal TermPosY, decimal TermMode) {
                TerminalRow rowTerminalRow = ((TerminalRow)(this.NewRow()));
                rowTerminalRow.ItemArray = new object[] {
                        null,
                        parentRepairZoneRowByRzTerm[0],
                        TermName,
                        TermIp,
                        TermPosX,
                        TermPosY,
                        TermMode};
                this.Rows.Add(rowTerminalRow);
                return rowTerminalRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalRow FindByTermId(decimal TermId) {
                return ((TerminalRow)(this.Rows.Find(new object[] {
                            TermId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TerminalDataTable cln = ((TerminalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TerminalDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTermId = base.Columns["TermId"];
                this.columnRepZoneId = base.Columns["RepZoneId"];
                this.columnTermName = base.Columns["TermName"];
                this.columnTermIp = base.Columns["TermIp"];
                this.columnTermPosX = base.Columns["TermPosX"];
                this.columnTermPosY = base.Columns["TermPosY"];
                this.columnTermMode = base.Columns["TermMode"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTermId = new System.Data.DataColumn("TermId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermId);
                this.columnRepZoneId = new System.Data.DataColumn("RepZoneId", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepZoneId);
                this.columnTermName = new System.Data.DataColumn("TermName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermName);
                this.columnTermIp = new System.Data.DataColumn("TermIp", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermIp);
                this.columnTermPosX = new System.Data.DataColumn("TermPosX", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermPosX);
                this.columnTermPosY = new System.Data.DataColumn("TermPosY", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermPosY);
                this.columnTermMode = new System.Data.DataColumn("TermMode", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermMode);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTermId}, true));
                this.columnTermId.AutoIncrement = true;
                this.columnTermId.AllowDBNull = false;
                this.columnTermId.Unique = true;
                this.columnRepZoneId.AllowDBNull = false;
                this.columnTermName.AllowDBNull = false;
                this.columnTermName.MaxLength = 40;
                this.columnTermIp.AllowDBNull = false;
                this.columnTermIp.MaxLength = 15;
                this.columnTermMode.AllowDBNull = false;
                this.columnTermMode.DefaultValue = ((decimal)(1m));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalRow NewTerminalRow() {
                return ((TerminalRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TerminalRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TerminalRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TerminalRowChanged != null)) {
                    this.TerminalRowChanged(this, new TerminalRowChangeEvent(((TerminalRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TerminalRowChanging != null)) {
                    this.TerminalRowChanging(this, new TerminalRowChangeEvent(((TerminalRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TerminalRowDeleted != null)) {
                    this.TerminalRowDeleted(this, new TerminalRowChangeEvent(((TerminalRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TerminalRowDeleting != null)) {
                    this.TerminalRowDeleting(this, new TerminalRowChangeEvent(((TerminalRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTerminalRow(TerminalRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDataSet ds = new ReworksDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TerminalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DeviceTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTypeId;
            
            private System.Data.DataColumn columnType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTypeDataTable() {
                this.TableName = "DeviceType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeviceTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DeviceTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeIdColumn {
                get {
                    return this.columnTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTypeRow this[int index] {
                get {
                    return ((DeviceTypeRow)(this.Rows[index]));
                }
            }
            
            public event DeviceTypeRowChangeEventHandler DeviceTypeRowChanging;
            
            public event DeviceTypeRowChangeEventHandler DeviceTypeRowChanged;
            
            public event DeviceTypeRowChangeEventHandler DeviceTypeRowDeleting;
            
            public event DeviceTypeRowChangeEventHandler DeviceTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDeviceTypeRow(DeviceTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTypeRow AddDeviceTypeRow(int TypeId, string Type) {
                DeviceTypeRow rowDeviceTypeRow = ((DeviceTypeRow)(this.NewRow()));
                rowDeviceTypeRow.ItemArray = new object[] {
                        TypeId,
                        Type};
                this.Rows.Add(rowDeviceTypeRow);
                return rowDeviceTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTypeRow FindByTypeId(int TypeId) {
                return ((DeviceTypeRow)(this.Rows.Find(new object[] {
                            TypeId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DeviceTypeDataTable cln = ((DeviceTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DeviceTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTypeId = base.Columns["TypeId"];
                this.columnType = base.Columns["Type"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTypeId = new System.Data.DataColumn("TypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeId);
                this.columnType = new System.Data.DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.Constraints.Add(new System.Data.UniqueConstraint("DataTable1Key1", new System.Data.DataColumn[] {
                                this.columnTypeId}, true));
                this.columnTypeId.AllowDBNull = false;
                this.columnTypeId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTypeRow NewDeviceTypeRow() {
                return ((DeviceTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DeviceTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DeviceTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeviceTypeRowChanged != null)) {
                    this.DeviceTypeRowChanged(this, new DeviceTypeRowChangeEvent(((DeviceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeviceTypeRowChanging != null)) {
                    this.DeviceTypeRowChanging(this, new DeviceTypeRowChangeEvent(((DeviceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeviceTypeRowDeleted != null)) {
                    this.DeviceTypeRowDeleted(this, new DeviceTypeRowChangeEvent(((DeviceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeviceTypeRowDeleting != null)) {
                    this.DeviceTypeRowDeleting(this, new DeviceTypeRowChangeEvent(((DeviceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDeviceTypeRow(DeviceTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDataSet ds = new ReworksDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeviceTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TermModesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnModeId;
            
            private System.Data.DataColumn columnModeName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TermModesDataTable() {
                this.TableName = "TermModes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TermModesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TermModesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModeIdColumn {
                get {
                    return this.columnModeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModeNameColumn {
                get {
                    return this.columnModeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TermModesRow this[int index] {
                get {
                    return ((TermModesRow)(this.Rows[index]));
                }
            }
            
            public event TermModesRowChangeEventHandler TermModesRowChanging;
            
            public event TermModesRowChangeEventHandler TermModesRowChanged;
            
            public event TermModesRowChangeEventHandler TermModesRowDeleting;
            
            public event TermModesRowChangeEventHandler TermModesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTermModesRow(TermModesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TermModesRow AddTermModesRow(int ModeId, string ModeName) {
                TermModesRow rowTermModesRow = ((TermModesRow)(this.NewRow()));
                rowTermModesRow.ItemArray = new object[] {
                        ModeId,
                        ModeName};
                this.Rows.Add(rowTermModesRow);
                return rowTermModesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TermModesRow FindByModeId(int ModeId) {
                return ((TermModesRow)(this.Rows.Find(new object[] {
                            ModeId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TermModesDataTable cln = ((TermModesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TermModesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeId = base.Columns["ModeId"];
                this.columnModeName = base.Columns["ModeName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeId = new System.Data.DataColumn("ModeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnModeId);
                this.columnModeName = new System.Data.DataColumn("ModeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnModeName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnModeId}, true));
                this.columnModeId.AllowDBNull = false;
                this.columnModeId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TermModesRow NewTermModesRow() {
                return ((TermModesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TermModesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TermModesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TermModesRowChanged != null)) {
                    this.TermModesRowChanged(this, new TermModesRowChangeEvent(((TermModesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TermModesRowChanging != null)) {
                    this.TermModesRowChanging(this, new TermModesRowChangeEvent(((TermModesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TermModesRowDeleted != null)) {
                    this.TermModesRowDeleted(this, new TermModesRowChangeEvent(((TermModesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TermModesRowDeleting != null)) {
                    this.TermModesRowDeleting(this, new TermModesRowChangeEvent(((TermModesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTermModesRow(TermModesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDataSet ds = new ReworksDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TermModesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ControllerRow : System.Data.DataRow {
            
            private ControllerDataTable tableController;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ControllerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableController = ((ControllerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContId {
                get {
                    return ((decimal)(this[this.tableController.ContIdColumn]));
                }
                set {
                    this[this.tableController.ContIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PlantId {
                get {
                    return ((decimal)(this[this.tableController.PlantIdColumn]));
                }
                set {
                    this[this.tableController.PlantIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContName {
                get {
                    return ((string)(this[this.tableController.ContNameColumn]));
                }
                set {
                    this[this.tableController.ContNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContIp {
                get {
                    return ((string)(this[this.tableController.ContIpColumn]));
                }
                set {
                    this[this.tableController.ContIpColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContPosX {
                get {
                    try {
                        return ((decimal)(this[this.tableController.ContPosXColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContPosX\' in table \'Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableController.ContPosXColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContPosY {
                get {
                    try {
                        return ((decimal)(this[this.tableController.ContPosYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContPosY\' in table \'Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableController.ContPosYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InputCoilStartAddress {
                get {
                    try {
                        return ((decimal)(this[this.tableController.InputCoilStartAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InputCoilStartAddress\' in table \'Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableController.InputCoilStartAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InputCoilUnitCount {
                get {
                    try {
                        return ((decimal)(this[this.tableController.InputCoilUnitCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InputCoilUnitCount\' in table \'Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableController.InputCoilUnitCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OutputCoilStartAddress {
                get {
                    try {
                        return ((decimal)(this[this.tableController.OutputCoilStartAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OutputCoilStartAddress\' in table \'Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableController.OutputCoilStartAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OutputCoilUnitCount {
                get {
                    try {
                        return ((decimal)(this[this.tableController.OutputCoilUnitCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OutputCoilUnitCount\' in table \'Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableController.OutputCoilUnitCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow PlantRow {
                get {
                    return ((PlantRow)(this.GetParentRow(this.Table.ParentRelations["PlantCont"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PlantCont"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContPosXNull() {
                return this.IsNull(this.tableController.ContPosXColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContPosXNull() {
                this[this.tableController.ContPosXColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContPosYNull() {
                return this.IsNull(this.tableController.ContPosYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContPosYNull() {
                this[this.tableController.ContPosYColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInputCoilStartAddressNull() {
                return this.IsNull(this.tableController.InputCoilStartAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInputCoilStartAddressNull() {
                this[this.tableController.InputCoilStartAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInputCoilUnitCountNull() {
                return this.IsNull(this.tableController.InputCoilUnitCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInputCoilUnitCountNull() {
                this[this.tableController.InputCoilUnitCountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutputCoilStartAddressNull() {
                return this.IsNull(this.tableController.OutputCoilStartAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutputCoilStartAddressNull() {
                this[this.tableController.OutputCoilStartAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutputCoilUnitCountNull() {
                return this.IsNull(this.tableController.OutputCoilUnitCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutputCoilUnitCountNull() {
                this[this.tableController.OutputCoilUnitCountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SensorRow[] GetSensorRows() {
                return ((SensorRow[])(base.GetChildRows(this.Table.ChildRelations["ContSens"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanerRow[] GetScanerRows() {
                return ((ScanerRow[])(base.GetChildRows(this.Table.ChildRelations["ContScan"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow[] GetLockerRows() {
                return ((LockerRow[])(base.GetChildRows(this.Table.ChildRelations["ContLock"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ControlPointRow : System.Data.DataRow {
            
            private ControlPointDataTable tableControlPoint;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ControlPointRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableControlPoint = ((ControlPointDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContPointId {
                get {
                    return ((decimal)(this[this.tableControlPoint.ContPointIdColumn]));
                }
                set {
                    this[this.tableControlPoint.ContPointIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RepZoneId {
                get {
                    return ((decimal)(this[this.tableControlPoint.RepZoneIdColumn]));
                }
                set {
                    this[this.tableControlPoint.RepZoneIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContPointName {
                get {
                    try {
                        return ((string)(this[this.tableControlPoint.ContPointNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContPointName\' in table \'ControlPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableControlPoint.ContPointNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContPointType {
                get {
                    try {
                        return ((decimal)(this[this.tableControlPoint.ContPointTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContPointType\' in table \'ControlPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableControlPoint.ContPointTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepairZoneRow RepairZoneRow {
                get {
                    return ((RepairZoneRow)(this.GetParentRow(this.Table.ParentRelations["RzCp"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RzCp"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContPointNameNull() {
                return this.IsNull(this.tableControlPoint.ContPointNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContPointNameNull() {
                this[this.tableControlPoint.ContPointNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContPointTypeNull() {
                return this.IsNull(this.tableControlPoint.ContPointTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContPointTypeNull() {
                this[this.tableControlPoint.ContPointTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SensorRow[] GetSensorRows() {
                return ((SensorRow[])(base.GetChildRows(this.Table.ChildRelations["CpSens"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanerRow[] GetScanerRows() {
                return ((ScanerRow[])(base.GetChildRows(this.Table.ChildRelations["CpScan"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow[] GetLockerRows() {
                return ((LockerRow[])(base.GetChildRows(this.Table.ChildRelations["CpLock"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LockerRow : System.Data.DataRow {
            
            private LockerDataTable tableLocker;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LockerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLocker = ((LockerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LocId {
                get {
                    return ((decimal)(this[this.tableLocker.LocIdColumn]));
                }
                set {
                    this[this.tableLocker.LocIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContId {
                get {
                    return ((decimal)(this[this.tableLocker.ContIdColumn]));
                }
                set {
                    this[this.tableLocker.ContIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContPointId {
                get {
                    return ((decimal)(this[this.tableLocker.ContPointIdColumn]));
                }
                set {
                    this[this.tableLocker.ContPointIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LocType {
                get {
                    return ((decimal)(this[this.tableLocker.LocTypeColumn]));
                }
                set {
                    this[this.tableLocker.LocTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LocAddress {
                get {
                    return ((decimal)(this[this.tableLocker.LocAddressColumn]));
                }
                set {
                    this[this.tableLocker.LocAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControllerRow ControllerRow {
                get {
                    return ((ControllerRow)(this.GetParentRow(this.Table.ParentRelations["ContLock"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ContLock"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlPointRow ControlPointRow {
                get {
                    return ((ControlPointRow)(this.GetParentRow(this.Table.ParentRelations["CpLock"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CpLock"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PlantRow : System.Data.DataRow {
            
            private PlantDataTable tablePlant;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlantRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlant = ((PlantDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PlantId {
                get {
                    return ((decimal)(this[this.tablePlant.PlantIdColumn]));
                }
                set {
                    this[this.tablePlant.PlantIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlantName {
                get {
                    return ((string)(this[this.tablePlant.PlantNameColumn]));
                }
                set {
                    this[this.tablePlant.PlantNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlantNameEng {
                get {
                    try {
                        return ((string)(this[this.tablePlant.PlantNameEngColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PlantNameEng\' in table \'Plant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlant.PlantNameEngColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlantCorpId {
                get {
                    return ((string)(this[this.tablePlant.PlantCorpIdColumn]));
                }
                set {
                    this[this.tablePlant.PlantCorpIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlantNameEngNull() {
                return this.IsNull(this.tablePlant.PlantNameEngColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlantNameEngNull() {
                this[this.tablePlant.PlantNameEngColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepairZoneRow[] GetRepairZoneRows() {
                return ((RepairZoneRow[])(base.GetChildRows(this.Table.ChildRelations["PlantRz"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControllerRow[] GetControllerRows() {
                return ((ControllerRow[])(base.GetChildRows(this.Table.ChildRelations["PlantCont"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RepairZoneRow : System.Data.DataRow {
            
            private RepairZoneDataTable tableRepairZone;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RepairZoneRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRepairZone = ((RepairZoneDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RepZoneId {
                get {
                    return ((decimal)(this[this.tableRepairZone.RepZoneIdColumn]));
                }
                set {
                    this[this.tableRepairZone.RepZoneIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PlantId {
                get {
                    return ((decimal)(this[this.tableRepairZone.PlantIdColumn]));
                }
                set {
                    this[this.tableRepairZone.PlantIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepZoneName {
                get {
                    return ((string)(this[this.tableRepairZone.RepZoneNameColumn]));
                }
                set {
                    this[this.tableRepairZone.RepZoneNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepZoneNameEng {
                get {
                    try {
                        return ((string)(this[this.tableRepairZone.RepZoneNameEngColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RepZoneNameEng\' in table \'RepairZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepairZone.RepZoneNameEngColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RepZonePosX1 {
                get {
                    try {
                        return ((decimal)(this[this.tableRepairZone.RepZonePosX1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RepZonePosX1\' in table \'RepairZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepairZone.RepZonePosX1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RepZonePosY1 {
                get {
                    try {
                        return ((decimal)(this[this.tableRepairZone.RepZonePosY1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RepZonePosY1\' in table \'RepairZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepairZone.RepZonePosY1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RepZonePosX2 {
                get {
                    try {
                        return ((decimal)(this[this.tableRepairZone.RepZonePosX2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RepZonePosX2\' in table \'RepairZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepairZone.RepZonePosX2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RepZonePosY2 {
                get {
                    try {
                        return ((decimal)(this[this.tableRepairZone.RepZonePosY2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RepZonePosY2\' in table \'RepairZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepairZone.RepZonePosY2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow PlantRow {
                get {
                    return ((PlantRow)(this.GetParentRow(this.Table.ParentRelations["PlantRz"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PlantRz"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepZoneNameEngNull() {
                return this.IsNull(this.tableRepairZone.RepZoneNameEngColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepZoneNameEngNull() {
                this[this.tableRepairZone.RepZoneNameEngColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepZonePosX1Null() {
                return this.IsNull(this.tableRepairZone.RepZonePosX1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepZonePosX1Null() {
                this[this.tableRepairZone.RepZonePosX1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepZonePosY1Null() {
                return this.IsNull(this.tableRepairZone.RepZonePosY1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepZonePosY1Null() {
                this[this.tableRepairZone.RepZonePosY1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepZonePosX2Null() {
                return this.IsNull(this.tableRepairZone.RepZonePosX2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepZonePosX2Null() {
                this[this.tableRepairZone.RepZonePosX2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepZonePosY2Null() {
                return this.IsNull(this.tableRepairZone.RepZonePosY2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepZonePosY2Null() {
                this[this.tableRepairZone.RepZonePosY2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalRow[] GetTerminalRows() {
                return ((TerminalRow[])(base.GetChildRows(this.Table.ChildRelations["RzTerm"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlPointRow[] GetControlPointRows() {
                return ((ControlPointRow[])(base.GetChildRows(this.Table.ChildRelations["RzCp"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScanerRow : System.Data.DataRow {
            
            private ScanerDataTable tableScaner;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScanerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScaner = ((ScanerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ScanId {
                get {
                    return ((decimal)(this[this.tableScaner.ScanIdColumn]));
                }
                set {
                    this[this.tableScaner.ScanIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContPointId {
                get {
                    return ((decimal)(this[this.tableScaner.ContPointIdColumn]));
                }
                set {
                    this[this.tableScaner.ContPointIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContId {
                get {
                    return ((decimal)(this[this.tableScaner.ContIdColumn]));
                }
                set {
                    this[this.tableScaner.ContIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScanName {
                get {
                    return ((string)(this[this.tableScaner.ScanNameColumn]));
                }
                set {
                    this[this.tableScaner.ScanNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ScanType {
                get {
                    return ((decimal)(this[this.tableScaner.ScanTypeColumn]));
                }
                set {
                    this[this.tableScaner.ScanTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ScanAddress {
                get {
                    return ((decimal)(this[this.tableScaner.ScanAddressColumn]));
                }
                set {
                    this[this.tableScaner.ScanAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ScanPosX {
                get {
                    try {
                        return ((decimal)(this[this.tableScaner.ScanPosXColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ScanPosX\' in table \'Scaner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScaner.ScanPosXColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ScanPosY {
                get {
                    try {
                        return ((decimal)(this[this.tableScaner.ScanPosYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ScanPosY\' in table \'Scaner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScaner.ScanPosYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ScanDataPort {
                get {
                    try {
                        return ((decimal)(this[this.tableScaner.ScanDataPortColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ScanDataPort\' in table \'Scaner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScaner.ScanDataPortColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlPointRow ControlPointRow {
                get {
                    return ((ControlPointRow)(this.GetParentRow(this.Table.ParentRelations["CpScan"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CpScan"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControllerRow ControllerRow {
                get {
                    return ((ControllerRow)(this.GetParentRow(this.Table.ParentRelations["ContScan"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ContScan"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScanPosXNull() {
                return this.IsNull(this.tableScaner.ScanPosXColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScanPosXNull() {
                this[this.tableScaner.ScanPosXColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScanPosYNull() {
                return this.IsNull(this.tableScaner.ScanPosYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScanPosYNull() {
                this[this.tableScaner.ScanPosYColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScanDataPortNull() {
                return this.IsNull(this.tableScaner.ScanDataPortColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScanDataPortNull() {
                this[this.tableScaner.ScanDataPortColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SensorRow : System.Data.DataRow {
            
            private SensorDataTable tableSensor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SensorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSensor = ((SensorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SensId {
                get {
                    return ((decimal)(this[this.tableSensor.SensIdColumn]));
                }
                set {
                    this[this.tableSensor.SensIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContPointId {
                get {
                    return ((decimal)(this[this.tableSensor.ContPointIdColumn]));
                }
                set {
                    this[this.tableSensor.ContPointIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ContId {
                get {
                    return ((decimal)(this[this.tableSensor.ContIdColumn]));
                }
                set {
                    this[this.tableSensor.ContIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SensType {
                get {
                    return ((decimal)(this[this.tableSensor.SensTypeColumn]));
                }
                set {
                    this[this.tableSensor.SensTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SensAddress {
                get {
                    return ((decimal)(this[this.tableSensor.SensAddressColumn]));
                }
                set {
                    this[this.tableSensor.SensAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControllerRow ControllerRow {
                get {
                    return ((ControllerRow)(this.GetParentRow(this.Table.ParentRelations["ContSens"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ContSens"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlPointRow ControlPointRow {
                get {
                    return ((ControlPointRow)(this.GetParentRow(this.Table.ParentRelations["CpSens"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CpSens"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TerminalRow : System.Data.DataRow {
            
            private TerminalDataTable tableTerminal;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TerminalRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTerminal = ((TerminalDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TermId {
                get {
                    return ((decimal)(this[this.tableTerminal.TermIdColumn]));
                }
                set {
                    this[this.tableTerminal.TermIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RepZoneId {
                get {
                    return ((decimal)(this[this.tableTerminal.RepZoneIdColumn]));
                }
                set {
                    this[this.tableTerminal.RepZoneIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TermName {
                get {
                    return ((string)(this[this.tableTerminal.TermNameColumn]));
                }
                set {
                    this[this.tableTerminal.TermNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TermIp {
                get {
                    return ((string)(this[this.tableTerminal.TermIpColumn]));
                }
                set {
                    this[this.tableTerminal.TermIpColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TermPosX {
                get {
                    try {
                        return ((decimal)(this[this.tableTerminal.TermPosXColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TermPosX\' in table \'Terminal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminal.TermPosXColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TermPosY {
                get {
                    try {
                        return ((decimal)(this[this.tableTerminal.TermPosYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TermPosY\' in table \'Terminal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminal.TermPosYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TermMode {
                get {
                    return ((decimal)(this[this.tableTerminal.TermModeColumn]));
                }
                set {
                    this[this.tableTerminal.TermModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepairZoneRow RepairZoneRow {
                get {
                    return ((RepairZoneRow)(this.GetParentRow(this.Table.ParentRelations["RzTerm"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RzTerm"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTermPosXNull() {
                return this.IsNull(this.tableTerminal.TermPosXColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTermPosXNull() {
                this[this.tableTerminal.TermPosXColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTermPosYNull() {
                return this.IsNull(this.tableTerminal.TermPosYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTermPosYNull() {
                this[this.tableTerminal.TermPosYColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DeviceTypeRow : System.Data.DataRow {
            
            private DeviceTypeDataTable tableDeviceType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeviceTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDeviceType = ((DeviceTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeId {
                get {
                    return ((int)(this[this.tableDeviceType.TypeIdColumn]));
                }
                set {
                    this[this.tableDeviceType.TypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableDeviceType.TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Type\' in table \'DeviceType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeviceType.TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableDeviceType.TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableDeviceType.TypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TermModesRow : System.Data.DataRow {
            
            private TermModesDataTable tableTermModes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TermModesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTermModes = ((TermModesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModeId {
                get {
                    return ((int)(this[this.tableTermModes.ModeIdColumn]));
                }
                set {
                    this[this.tableTermModes.ModeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModeName {
                get {
                    try {
                        return ((string)(this[this.tableTermModes.ModeNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ModeName\' in table \'TermModes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTermModes.ModeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModeNameNull() {
                return this.IsNull(this.tableTermModes.ModeNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModeNameNull() {
                this[this.tableTermModes.ModeNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ControllerRowChangeEvent : System.EventArgs {
            
            private ControllerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControllerRowChangeEvent(ControllerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControllerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ControlPointRowChangeEvent : System.EventArgs {
            
            private ControlPointRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlPointRowChangeEvent(ControlPointRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlPointRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LockerRowChangeEvent : System.EventArgs {
            
            private LockerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRowChangeEvent(LockerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LockerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PlantRowChangeEvent : System.EventArgs {
            
            private PlantRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRowChangeEvent(PlantRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlantRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RepairZoneRowChangeEvent : System.EventArgs {
            
            private RepairZoneRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepairZoneRowChangeEvent(RepairZoneRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RepairZoneRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScanerRowChangeEvent : System.EventArgs {
            
            private ScanerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanerRowChangeEvent(ScanerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScanerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SensorRowChangeEvent : System.EventArgs {
            
            private SensorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SensorRowChangeEvent(SensorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SensorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TerminalRowChangeEvent : System.EventArgs {
            
            private TerminalRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalRowChangeEvent(TerminalRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DeviceTypeRowChangeEvent : System.EventArgs {
            
            private DeviceTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTypeRowChangeEvent(DeviceTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TermModesRowChangeEvent : System.EventArgs {
            
            private TermModesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TermModesRowChangeEvent(TermModesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TermModesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace PlantConfig.ReworksDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ControllerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ControllerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Controller";
            tableMapping.ColumnMappings.Add("CONT_ID", "ContId");
            tableMapping.ColumnMappings.Add("PL_ID", "PlantId");
            tableMapping.ColumnMappings.Add("CONT_NAME", "ContName");
            tableMapping.ColumnMappings.Add("CONT_IP", "ContIp");
            tableMapping.ColumnMappings.Add("CONT_XPOS", "ContPosX");
            tableMapping.ColumnMappings.Add("CONT_YPOS", "ContPosY");
            tableMapping.ColumnMappings.Add("INPUTCOILSTARTADDRESS", "InputCoilStartAddress");
            tableMapping.ColumnMappings.Add("INPUTCOILUNITCOUNT", "InputCoilUnitCount");
            tableMapping.ColumnMappings.Add("OUTPUTCOILSTARTADDRESS", "OutputCoilStartAddress");
            tableMapping.ColumnMappings.Add("OUTPUTCOILUNITCOUNT", "OutputCoilUnitCount");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""REW_CONTROLLER"" WHERE ((""CONT_ID"" = :Original_CONT_ID) AND (""PL_ID"" = :Original_PL_ID) AND (""CONT_NAME"" = :Original_CONT_NAME) AND (""CONT_IP"" = :Original_CONT_IP) AND ((:IsNull_CONT_XPOS = 1 AND ""CONT_XPOS"" IS NULL) OR (""CONT_XPOS"" = :Original_CONT_XPOS)) AND ((:IsNull_CONT_YPOS = 1 AND ""CONT_YPOS"" IS NULL) OR (""CONT_YPOS"" = :Original_CONT_YPOS)) AND ((:IsNull_INPUTCOILSTARTADDRESS = 1 AND ""INPUTCOILSTARTADDRESS"" IS NULL) OR (""INPUTCOILSTARTADDRESS"" = :Original_INPUTCOILSTARTADDRESS)) AND ((:IsNull_INPUTCOILUNITCOUNT = 1 AND ""INPUTCOILUNITCOUNT"" IS NULL) OR (""INPUTCOILUNITCOUNT"" = :Original_INPUTCOILUNITCOUNT)) AND ((:p3 = 1 AND ""OUTPUTCOILSTARTADDRESS"" IS NULL) OR (""OUTPUTCOILSTARTADDRESS"" = :p2)) AND ((:IsNull_OUTPUTCOILUNITCOUNT = 1 AND ""OUTPUTCOILUNITCOUNT"" IS NULL) OR (""OUTPUTCOILUNITCOUNT"" = :Original_OUTPUTCOILUNITCOUNT)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "CONT_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_IP", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "CONT_IP", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_CONT_XPOS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "CONT_XPOS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_XPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_XPOS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_CONT_YPOS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "CONT_YPOS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_YPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_YPOS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_INPUTCOILSTARTADDRESS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "INPUTCOILSTARTADDRESS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_INPUTCOILSTARTADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "INPUTCOILSTARTADDRESS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_INPUTCOILUNITCOUNT", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "INPUTCOILUNITCOUNT", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_INPUTCOILUNITCOUNT", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "INPUTCOILUNITCOUNT", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("p3", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "OUTPUTCOILSTARTADDRESS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("p2", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OUTPUTCOILSTARTADDRESS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_OUTPUTCOILUNITCOUNT", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "OUTPUTCOILUNITCOUNT", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OUTPUTCOILUNITCOUNT", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OUTPUTCOILUNITCOUNT", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""REW_CONTROLLER"" (""CONT_ID"", ""PL_ID"", ""CONT_NAME"", ""CONT_IP"", ""CONT_XPOS"", ""CONT_YPOS"", ""INPUTCOILSTARTADDRESS"", ""INPUTCOILUNITCOUNT"", ""OUTPUTCOILSTARTADDRESS"", ""OUTPUTCOILUNITCOUNT"") VALUES (:CONT_ID, :PL_ID, :CONT_NAME, :CONT_IP, :CONT_XPOS, :CONT_YPOS, :INPUTCOILSTARTADDRESS, :INPUTCOILUNITCOUNT, :p1, :OUTPUTCOILUNITCOUNT)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "CONT_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_IP", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "CONT_IP", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_XPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_XPOS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_YPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_YPOS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("INPUTCOILSTARTADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "INPUTCOILSTARTADDRESS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("INPUTCOILUNITCOUNT", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "INPUTCOILUNITCOUNT", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("p1", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OUTPUTCOILSTARTADDRESS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OUTPUTCOILUNITCOUNT", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OUTPUTCOILUNITCOUNT", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""REW_CONTROLLER"" SET ""CONT_ID"" = :CONT_ID, ""PL_ID"" = :PL_ID, ""CONT_NAME"" = :CONT_NAME, ""CONT_IP"" = :CONT_IP, ""CONT_XPOS"" = :CONT_XPOS, ""CONT_YPOS"" = :CONT_YPOS, ""INPUTCOILSTARTADDRESS"" = :INPUTCOILSTARTADDRESS, ""INPUTCOILUNITCOUNT"" = :INPUTCOILUNITCOUNT, ""OUTPUTCOILSTARTADDRESS"" = :p1, ""OUTPUTCOILUNITCOUNT"" = :OUTPUTCOILUNITCOUNT WHERE ((""CONT_ID"" = :Original_CONT_ID) AND (""PL_ID"" = :Original_PL_ID) AND (""CONT_NAME"" = :Original_CONT_NAME) AND (""CONT_IP"" = :Original_CONT_IP) AND ((:IsNull_CONT_XPOS = 1 AND ""CONT_XPOS"" IS NULL) OR (""CONT_XPOS"" = :Original_CONT_XPOS)) AND ((:IsNull_CONT_YPOS = 1 AND ""CONT_YPOS"" IS NULL) OR (""CONT_YPOS"" = :Original_CONT_YPOS)) AND ((:IsNull_INPUTCOILSTARTADDRESS = 1 AND ""INPUTCOILSTARTADDRESS"" IS NULL) OR (""INPUTCOILSTARTADDRESS"" = :Original_INPUTCOILSTARTADDRESS)) AND ((:IsNull_INPUTCOILUNITCOUNT = 1 AND ""INPUTCOILUNITCOUNT"" IS NULL) OR (""INPUTCOILUNITCOUNT"" = :Original_INPUTCOILUNITCOUNT)) AND ((:p3 = 1 AND ""OUTPUTCOILSTARTADDRESS"" IS NULL) OR (""OUTPUTCOILSTARTADDRESS"" = :p2)) AND ((:IsNull_OUTPUTCOILUNITCOUNT = 1 AND ""OUTPUTCOILUNITCOUNT"" IS NULL) OR (""OUTPUTCOILUNITCOUNT"" = :Original_OUTPUTCOILUNITCOUNT)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "CONT_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_IP", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "CONT_IP", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_XPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_XPOS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_YPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_YPOS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("INPUTCOILSTARTADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "INPUTCOILSTARTADDRESS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("INPUTCOILUNITCOUNT", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "INPUTCOILUNITCOUNT", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("p1", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OUTPUTCOILSTARTADDRESS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OUTPUTCOILUNITCOUNT", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OUTPUTCOILUNITCOUNT", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "CONT_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_IP", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "CONT_IP", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_CONT_XPOS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "CONT_XPOS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_XPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_XPOS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_CONT_YPOS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "CONT_YPOS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_YPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_YPOS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_INPUTCOILSTARTADDRESS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "INPUTCOILSTARTADDRESS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_INPUTCOILSTARTADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "INPUTCOILSTARTADDRESS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_INPUTCOILUNITCOUNT", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "INPUTCOILUNITCOUNT", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_INPUTCOILUNITCOUNT", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "INPUTCOILUNITCOUNT", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("p3", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "OUTPUTCOILSTARTADDRESS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("p2", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OUTPUTCOILSTARTADDRESS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_OUTPUTCOILUNITCOUNT", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "OUTPUTCOILUNITCOUNT", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OUTPUTCOILUNITCOUNT", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OUTPUTCOILUNITCOUNT", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::PlantConfig.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CONT_ID, PL_ID, CONT_NAME, CONT_IP, CONT_XPOS, CONT_YPOS, INPUTCOILSTARTAD" +
                "DRESS, INPUTCOILUNITCOUNT, OUTPUTCOILSTARTADDRESS, OUTPUTCOILUNITCOUNT FROM REW_" +
                "CONTROLLER";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDataSet.ControllerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDataSet.ControllerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDataSet.ControllerDataTable dataTable = new ReworksDataSet.ControllerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet.ControllerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Controller");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CONT_ID, decimal Original_PL_ID, string Original_CONT_NAME, string Original_CONT_IP, System.Nullable<decimal> Original_CONT_XPOS, System.Nullable<decimal> Original_CONT_YPOS, System.Nullable<decimal> Original_INPUTCOILSTARTADDRESS, System.Nullable<decimal> Original_INPUTCOILUNITCOUNT, System.Nullable<decimal> p2, System.Nullable<decimal> Original_OUTPUTCOILUNITCOUNT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CONT_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_PL_ID));
            if ((Original_CONT_NAME == null)) {
                throw new System.ArgumentNullException("Original_CONT_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CONT_NAME));
            }
            if ((Original_CONT_IP == null)) {
                throw new System.ArgumentNullException("Original_CONT_IP");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_CONT_IP));
            }
            if ((Original_CONT_XPOS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_CONT_XPOS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_CONT_YPOS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_CONT_YPOS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Original_INPUTCOILSTARTADDRESS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_INPUTCOILSTARTADDRESS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Original_INPUTCOILUNITCOUNT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_INPUTCOILUNITCOUNT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((p2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((decimal)(p2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((Original_OUTPUTCOILUNITCOUNT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((decimal)(Original_OUTPUTCOILUNITCOUNT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CONT_ID, decimal PL_ID, string CONT_NAME, string CONT_IP, System.Nullable<decimal> CONT_XPOS, System.Nullable<decimal> CONT_YPOS, System.Nullable<decimal> INPUTCOILSTARTADDRESS, System.Nullable<decimal> INPUTCOILUNITCOUNT, System.Nullable<decimal> p1, System.Nullable<decimal> OUTPUTCOILUNITCOUNT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CONT_ID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(PL_ID));
            if ((CONT_NAME == null)) {
                throw new System.ArgumentNullException("CONT_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CONT_NAME));
            }
            if ((CONT_IP == null)) {
                throw new System.ArgumentNullException("CONT_IP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CONT_IP));
            }
            if ((CONT_XPOS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(CONT_XPOS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((CONT_YPOS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(CONT_YPOS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((INPUTCOILSTARTADDRESS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(INPUTCOILSTARTADDRESS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((INPUTCOILUNITCOUNT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(INPUTCOILUNITCOUNT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((p1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(p1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((OUTPUTCOILUNITCOUNT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(OUTPUTCOILUNITCOUNT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal CONT_ID, 
                    decimal PL_ID, 
                    string CONT_NAME, 
                    string CONT_IP, 
                    System.Nullable<decimal> CONT_XPOS, 
                    System.Nullable<decimal> CONT_YPOS, 
                    System.Nullable<decimal> INPUTCOILSTARTADDRESS, 
                    System.Nullable<decimal> INPUTCOILUNITCOUNT, 
                    System.Nullable<decimal> p1, 
                    System.Nullable<decimal> OUTPUTCOILUNITCOUNT, 
                    decimal Original_CONT_ID, 
                    decimal Original_PL_ID, 
                    string Original_CONT_NAME, 
                    string Original_CONT_IP, 
                    System.Nullable<decimal> Original_CONT_XPOS, 
                    System.Nullable<decimal> Original_CONT_YPOS, 
                    System.Nullable<decimal> Original_INPUTCOILSTARTADDRESS, 
                    System.Nullable<decimal> Original_INPUTCOILUNITCOUNT, 
                    System.Nullable<decimal> p2, 
                    System.Nullable<decimal> Original_OUTPUTCOILUNITCOUNT) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CONT_ID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(PL_ID));
            if ((CONT_NAME == null)) {
                throw new System.ArgumentNullException("CONT_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CONT_NAME));
            }
            if ((CONT_IP == null)) {
                throw new System.ArgumentNullException("CONT_IP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CONT_IP));
            }
            if ((CONT_XPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(CONT_XPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((CONT_YPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(CONT_YPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((INPUTCOILSTARTADDRESS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(INPUTCOILSTARTADDRESS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((INPUTCOILUNITCOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(INPUTCOILUNITCOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((p1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(p1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((OUTPUTCOILUNITCOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(OUTPUTCOILUNITCOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(Original_CONT_ID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(Original_PL_ID));
            if ((Original_CONT_NAME == null)) {
                throw new System.ArgumentNullException("Original_CONT_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_CONT_NAME));
            }
            if ((Original_CONT_IP == null)) {
                throw new System.ArgumentNullException("Original_CONT_IP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_CONT_IP));
            }
            if ((Original_CONT_XPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(Original_CONT_XPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((Original_CONT_YPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_CONT_YPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((Original_INPUTCOILSTARTADDRESS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Original_INPUTCOILSTARTADDRESS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            if ((Original_INPUTCOILUNITCOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(Original_INPUTCOILUNITCOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = System.DBNull.Value;
            }
            if ((p2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(p2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = System.DBNull.Value;
            }
            if ((Original_OUTPUTCOILUNITCOUNT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((decimal)(Original_OUTPUTCOILUNITCOUNT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ControlPointTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ControlPointTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ControlPoint";
            tableMapping.ColumnMappings.Add("CP_ID", "ContPointId");
            tableMapping.ColumnMappings.Add("RZONE_ID", "RepZoneId");
            tableMapping.ColumnMappings.Add("CP_NAME", "ContPointName");
            tableMapping.ColumnMappings.Add("CP_TYPE", "ContPointType");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""REW_CONTROLPOINT"" WHERE ((""CP_ID"" = :Original_CP_ID) AND (""RZONE_ID"" = :Original_RZONE_ID) AND ((:IsNull_CP_NAME = 1 AND ""CP_NAME"" IS NULL) OR (""CP_NAME"" = :Original_CP_NAME)) AND ((:IsNull_CP_TYPE = 1 AND ""CP_TYPE"" IS NULL) OR (""CP_TYPE"" = :Original_CP_TYPE)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_CP_NAME", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "CP_NAME", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CP_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "CP_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_CP_TYPE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "CP_TYPE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CP_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_TYPE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"REW_CONTROLPOINT\" (\"CP_ID\", \"RZONE_ID\", \"CP_NAME\", \"CP_TYPE\") VALUES" +
                " (:CP_ID, :RZONE_ID, :CP_NAME, :CP_TYPE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CP_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "CP_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CP_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_TYPE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""REW_CONTROLPOINT"" SET ""CP_ID"" = :CP_ID, ""RZONE_ID"" = :RZONE_ID, ""CP_NAME"" = :CP_NAME, ""CP_TYPE"" = :CP_TYPE WHERE ((""CP_ID"" = :Original_CP_ID) AND (""RZONE_ID"" = :Original_RZONE_ID) AND ((:IsNull_CP_NAME = 1 AND ""CP_NAME"" IS NULL) OR (""CP_NAME"" = :Original_CP_NAME)) AND ((:IsNull_CP_TYPE = 1 AND ""CP_TYPE"" IS NULL) OR (""CP_TYPE"" = :Original_CP_TYPE)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CP_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "CP_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CP_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_TYPE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_CP_NAME", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "CP_NAME", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CP_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "CP_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_CP_TYPE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "CP_TYPE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CP_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_TYPE", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::PlantConfig.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CP_ID, RZONE_ID, CP_NAME, CP_TYPE FROM REW_CONTROLPOINT";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDataSet.ControlPointDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDataSet.ControlPointDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDataSet.ControlPointDataTable dataTable = new ReworksDataSet.ControlPointDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet.ControlPointDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ControlPoint");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CP_ID, decimal Original_RZONE_ID, string Original_CP_NAME, System.Nullable<decimal> Original_CP_TYPE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CP_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_RZONE_ID));
            if ((Original_CP_NAME == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_CP_NAME));
            }
            if ((Original_CP_TYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_CP_TYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CP_ID, decimal RZONE_ID, string CP_NAME, System.Nullable<decimal> CP_TYPE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CP_ID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(RZONE_ID));
            if ((CP_NAME == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CP_NAME));
            }
            if ((CP_TYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(CP_TYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal CP_ID, decimal RZONE_ID, string CP_NAME, System.Nullable<decimal> CP_TYPE, decimal Original_CP_ID, decimal Original_RZONE_ID, string Original_CP_NAME, System.Nullable<decimal> Original_CP_TYPE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CP_ID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(RZONE_ID));
            if ((CP_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CP_NAME));
            }
            if ((CP_TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(CP_TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Original_CP_ID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_RZONE_ID));
            if ((Original_CP_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_CP_NAME));
            }
            if ((Original_CP_TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_CP_TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LockerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LockerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Locker";
            tableMapping.ColumnMappings.Add("LOC_ID", "LocId");
            tableMapping.ColumnMappings.Add("CONT_ID", "ContId");
            tableMapping.ColumnMappings.Add("CP_ID", "ContPointId");
            tableMapping.ColumnMappings.Add("LOC_TYPE", "LocType");
            tableMapping.ColumnMappings.Add("LOC_ADDRESS", "LocAddress");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"REW_LOCKER\" WHERE ((\"LOC_ID\" = :Original_LOC_ID) AND (\"CONT_ID\" = :O" +
                "riginal_CONT_ID) AND (\"CP_ID\" = :Original_CP_ID) AND (\"LOC_TYPE\" = :Original_LOC" +
                "_TYPE) AND (\"LOC_ADDRESS\" = :Original_LOC_ADDRESS))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_LOC_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LOC_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_LOC_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LOC_TYPE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_LOC_ADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LOC_ADDRESS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"REW_LOCKER\" (\"LOC_ID\", \"CONT_ID\", \"CP_ID\", \"LOC_TYPE\", \"LOC_ADDRESS\"" +
                ") VALUES (:LOC_ID, :CONT_ID, :CP_ID, :LOC_TYPE, :LOC_ADDRESS)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("LOC_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LOC_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("LOC_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LOC_TYPE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("LOC_ADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LOC_ADDRESS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""REW_LOCKER"" SET ""LOC_ID"" = :LOC_ID, ""CONT_ID"" = :CONT_ID, ""CP_ID"" = :CP_ID, ""LOC_TYPE"" = :LOC_TYPE, ""LOC_ADDRESS"" = :LOC_ADDRESS WHERE ((""LOC_ID"" = :Original_LOC_ID) AND (""CONT_ID"" = :Original_CONT_ID) AND (""CP_ID"" = :Original_CP_ID) AND (""LOC_TYPE"" = :Original_LOC_TYPE) AND (""LOC_ADDRESS"" = :Original_LOC_ADDRESS))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("LOC_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LOC_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("LOC_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LOC_TYPE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("LOC_ADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LOC_ADDRESS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_LOC_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LOC_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_LOC_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LOC_TYPE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_LOC_ADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LOC_ADDRESS", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::PlantConfig.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LOC_ID, CONT_ID, CP_ID, LOC_TYPE, LOC_ADDRESS FROM REW_LOCKER";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDataSet.LockerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDataSet.LockerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDataSet.LockerDataTable dataTable = new ReworksDataSet.LockerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet.LockerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Locker");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_LOC_ID, decimal Original_CONT_ID, decimal Original_CP_ID, decimal Original_LOC_TYPE, decimal Original_LOC_ADDRESS) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_LOC_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_CONT_ID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_CP_ID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_LOC_TYPE));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_LOC_ADDRESS));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal LOC_ID, decimal CONT_ID, decimal CP_ID, decimal LOC_TYPE, decimal LOC_ADDRESS) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(LOC_ID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(CONT_ID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(CP_ID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(LOC_TYPE));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(LOC_ADDRESS));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal LOC_ID, decimal CONT_ID, decimal CP_ID, decimal LOC_TYPE, decimal LOC_ADDRESS, decimal Original_LOC_ID, decimal Original_CONT_ID, decimal Original_CP_ID, decimal Original_LOC_TYPE, decimal Original_LOC_ADDRESS) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(LOC_ID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(CONT_ID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(CP_ID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(LOC_TYPE));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(LOC_ADDRESS));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_LOC_ID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_CONT_ID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_CP_ID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_LOC_TYPE));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_LOC_ADDRESS));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PlantTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PlantTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Plant";
            tableMapping.ColumnMappings.Add("PL_ID", "PlantId");
            tableMapping.ColumnMappings.Add("PL_NAME", "PlantName");
            tableMapping.ColumnMappings.Add("PL_NAME_ENG", "PlantNameEng");
            tableMapping.ColumnMappings.Add("PL_CORP_ID", "PlantCorpId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"REW_PLANT\" WHERE ((\"PL_ID\" = :Original_PL_ID) AND (\"PL_NAME\" = :Orig" +
                "inal_PL_NAME) AND ((:IsNull_PL_NAME_ENG = 1 AND \"PL_NAME_ENG\" IS NULL) OR (\"PL_N" +
                "AME_ENG\" = :Original_PL_NAME_ENG)) AND (\"PL_CORP_ID\" = :Original_PL_CORP_ID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_PL_NAME_ENG", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "PL_NAME_ENG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME_ENG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_CORP_ID", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_CORP_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"REW_PLANT\" (\"PL_ID\", \"PL_NAME\", \"PL_NAME_ENG\", \"PL_CORP_ID\") VALUES " +
                "(:PL_ID, :PL_NAME, :PL_NAME_ENG, :PL_CORP_ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME_ENG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_CORP_ID", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_CORP_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""REW_PLANT"" SET ""PL_ID"" = :PL_ID, ""PL_NAME"" = :PL_NAME, ""PL_NAME_ENG"" = :PL_NAME_ENG, ""PL_CORP_ID"" = :PL_CORP_ID WHERE ((""PL_ID"" = :Original_PL_ID) AND (""PL_NAME"" = :Original_PL_NAME) AND ((:IsNull_PL_NAME_ENG = 1 AND ""PL_NAME_ENG"" IS NULL) OR (""PL_NAME_ENG"" = :Original_PL_NAME_ENG)) AND (""PL_CORP_ID"" = :Original_PL_CORP_ID))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME_ENG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_CORP_ID", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_CORP_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_PL_NAME_ENG", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "PL_NAME_ENG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_NAME_ENG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_CORP_ID", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "PL_CORP_ID", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::PlantConfig.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PL_ID, PL_NAME, PL_NAME_ENG, PL_CORP_ID FROM REW_PLANT";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDataSet.PlantDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDataSet.PlantDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDataSet.PlantDataTable dataTable = new ReworksDataSet.PlantDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet.PlantDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Plant");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_PL_ID, string Original_PL_NAME, string Original_PL_NAME_ENG, string Original_PL_CORP_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_PL_ID));
            if ((Original_PL_NAME == null)) {
                throw new System.ArgumentNullException("Original_PL_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_PL_NAME));
            }
            if ((Original_PL_NAME_ENG == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_PL_NAME_ENG));
            }
            if ((Original_PL_CORP_ID == null)) {
                throw new System.ArgumentNullException("Original_PL_CORP_ID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_PL_CORP_ID));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal PL_ID, string PL_NAME, string PL_NAME_ENG, string PL_CORP_ID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(PL_ID));
            if ((PL_NAME == null)) {
                throw new System.ArgumentNullException("PL_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PL_NAME));
            }
            if ((PL_NAME_ENG == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PL_NAME_ENG));
            }
            if ((PL_CORP_ID == null)) {
                throw new System.ArgumentNullException("PL_CORP_ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(PL_CORP_ID));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal PL_ID, string PL_NAME, string PL_NAME_ENG, string PL_CORP_ID, decimal Original_PL_ID, string Original_PL_NAME, string Original_PL_NAME_ENG, string Original_PL_CORP_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(PL_ID));
            if ((PL_NAME == null)) {
                throw new System.ArgumentNullException("PL_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PL_NAME));
            }
            if ((PL_NAME_ENG == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PL_NAME_ENG));
            }
            if ((PL_CORP_ID == null)) {
                throw new System.ArgumentNullException("PL_CORP_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(PL_CORP_ID));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Original_PL_ID));
            if ((Original_PL_NAME == null)) {
                throw new System.ArgumentNullException("Original_PL_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_PL_NAME));
            }
            if ((Original_PL_NAME_ENG == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_PL_NAME_ENG));
            }
            if ((Original_PL_CORP_ID == null)) {
                throw new System.ArgumentNullException("Original_PL_CORP_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_PL_CORP_ID));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RepairZoneTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RepairZoneTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "RepairZone";
            tableMapping.ColumnMappings.Add("RZONE_ID", "RepZoneId");
            tableMapping.ColumnMappings.Add("PL_ID", "PlantId");
            tableMapping.ColumnMappings.Add("RZONE_NAME", "RepZoneName");
            tableMapping.ColumnMappings.Add("RZONE_NAME_ENG", "RepZoneNameEng");
            tableMapping.ColumnMappings.Add("RZONE_X1POS", "RepZonePosX1");
            tableMapping.ColumnMappings.Add("RZONE_Y1POS", "RepZonePosY1");
            tableMapping.ColumnMappings.Add("RZONE_X2POS", "RepZonePosX2");
            tableMapping.ColumnMappings.Add("RZONE_Y2POS", "RepZonePosY2");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""REW_REPAIRZONE"" WHERE ((""RZONE_ID"" = :Original_RZONE_ID) AND (""PL_ID"" = :Original_PL_ID) AND (""RZONE_NAME"" = :Original_RZONE_NAME) AND ((:IsNull_RZONE_NAME_ENG = 1 AND ""RZONE_NAME_ENG"" IS NULL) OR (""RZONE_NAME_ENG"" = :Original_RZONE_NAME_ENG)) AND ((:IsNull_RZONE_X1POS = 1 AND ""RZONE_X1POS"" IS NULL) OR (""RZONE_X1POS"" = :Original_RZONE_X1POS)) AND ((:IsNull_RZONE_Y1POS = 1 AND ""RZONE_Y1POS"" IS NULL) OR (""RZONE_Y1POS"" = :Original_RZONE_Y1POS)) AND ((:IsNull_RZONE_X2POS = 1 AND ""RZONE_X2POS"" IS NULL) OR (""RZONE_X2POS"" = :Original_RZONE_X2POS)) AND ((:IsNull_RZONE_Y2POS = 1 AND ""RZONE_Y2POS"" IS NULL) OR (""RZONE_Y2POS"" = :Original_RZONE_Y2POS)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "RZONE_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_RZONE_NAME_ENG", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "RZONE_NAME_ENG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "RZONE_NAME_ENG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_RZONE_X1POS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "RZONE_X1POS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_X1POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_X1POS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_RZONE_Y1POS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "RZONE_Y1POS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_Y1POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_Y1POS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_RZONE_X2POS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "RZONE_X2POS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_X2POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_X2POS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_RZONE_Y2POS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "RZONE_Y2POS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_Y2POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_Y2POS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"REW_REPAIRZONE\" (\"RZONE_ID\", \"PL_ID\", \"RZONE_NAME\", \"RZONE_NAME_ENG\"" +
                ", \"RZONE_X1POS\", \"RZONE_Y1POS\", \"RZONE_X2POS\", \"RZONE_Y2POS\") VALUES (:RZONE_ID," +
                " :PL_ID, :RZONE_NAME, :RZONE_NAME_ENG, :RZONE_X1POS, :RZONE_Y1POS, :RZONE_X2POS," +
                " :RZONE_Y2POS)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "RZONE_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "RZONE_NAME_ENG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_X1POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_X1POS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_Y1POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_Y1POS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_X2POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_X2POS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_Y2POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_Y2POS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""REW_REPAIRZONE"" SET ""RZONE_ID"" = :RZONE_ID, ""PL_ID"" = :PL_ID, ""RZONE_NAME"" = :RZONE_NAME, ""RZONE_NAME_ENG"" = :RZONE_NAME_ENG, ""RZONE_X1POS"" = :RZONE_X1POS, ""RZONE_Y1POS"" = :RZONE_Y1POS, ""RZONE_X2POS"" = :RZONE_X2POS, ""RZONE_Y2POS"" = :RZONE_Y2POS WHERE ((""RZONE_ID"" = :Original_RZONE_ID) AND (""PL_ID"" = :Original_PL_ID) AND (""RZONE_NAME"" = :Original_RZONE_NAME) AND ((:IsNull_RZONE_NAME_ENG = 1 AND ""RZONE_NAME_ENG"" IS NULL) OR (""RZONE_NAME_ENG"" = :Original_RZONE_NAME_ENG)) AND ((:IsNull_RZONE_X1POS = 1 AND ""RZONE_X1POS"" IS NULL) OR (""RZONE_X1POS"" = :Original_RZONE_X1POS)) AND ((:IsNull_RZONE_Y1POS = 1 AND ""RZONE_Y1POS"" IS NULL) OR (""RZONE_Y1POS"" = :Original_RZONE_Y1POS)) AND ((:IsNull_RZONE_X2POS = 1 AND ""RZONE_X2POS"" IS NULL) OR (""RZONE_X2POS"" = :Original_RZONE_X2POS)) AND ((:IsNull_RZONE_Y2POS = 1 AND ""RZONE_Y2POS"" IS NULL) OR (""RZONE_Y2POS"" = :Original_RZONE_Y2POS)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "RZONE_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "RZONE_NAME_ENG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_X1POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_X1POS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_Y1POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_Y1POS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_X2POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_X2POS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_Y2POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_Y2POS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PL_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PL_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "RZONE_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_RZONE_NAME_ENG", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "RZONE_NAME_ENG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_NAME_ENG", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "RZONE_NAME_ENG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_RZONE_X1POS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "RZONE_X1POS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_X1POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_X1POS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_RZONE_Y1POS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "RZONE_Y1POS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_Y1POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_Y1POS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_RZONE_X2POS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "RZONE_X2POS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_X2POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_X2POS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_RZONE_Y2POS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "RZONE_Y2POS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_Y2POS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_Y2POS", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::PlantConfig.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     RZONE_ID, PL_ID, RZONE_NAME, RZONE_NAME_ENG, RZONE_X1POS, RZONE_Y1POS," +
                " RZONE_X2POS, RZONE_Y2POS\r\nFROM         REW_REPAIRZONE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDataSet.RepairZoneDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDataSet.RepairZoneDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDataSet.RepairZoneDataTable dataTable = new ReworksDataSet.RepairZoneDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet.RepairZoneDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet dataSet) {
            return this.Adapter.Update(dataSet, "RepairZone");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_RZONE_ID, decimal Original_PL_ID, string Original_RZONE_NAME, string Original_RZONE_NAME_ENG, System.Nullable<decimal> Original_RZONE_X1POS, System.Nullable<decimal> Original_RZONE_Y1POS, System.Nullable<decimal> Original_RZONE_X2POS, System.Nullable<decimal> Original_RZONE_Y2POS) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_RZONE_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_PL_ID));
            if ((Original_RZONE_NAME == null)) {
                throw new System.ArgumentNullException("Original_RZONE_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_RZONE_NAME));
            }
            if ((Original_RZONE_NAME_ENG == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_RZONE_NAME_ENG));
            }
            if ((Original_RZONE_X1POS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_RZONE_X1POS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_RZONE_Y1POS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_RZONE_Y1POS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_RZONE_X2POS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_RZONE_X2POS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_RZONE_Y2POS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_RZONE_Y2POS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal RZONE_ID, decimal PL_ID, string RZONE_NAME, string RZONE_NAME_ENG, System.Nullable<decimal> RZONE_X1POS, System.Nullable<decimal> RZONE_Y1POS, System.Nullable<decimal> RZONE_X2POS, System.Nullable<decimal> RZONE_Y2POS) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(RZONE_ID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(PL_ID));
            if ((RZONE_NAME == null)) {
                throw new System.ArgumentNullException("RZONE_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(RZONE_NAME));
            }
            if ((RZONE_NAME_ENG == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(RZONE_NAME_ENG));
            }
            if ((RZONE_X1POS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(RZONE_X1POS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((RZONE_Y1POS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(RZONE_Y1POS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((RZONE_X2POS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(RZONE_X2POS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((RZONE_Y2POS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(RZONE_Y2POS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal RZONE_ID, 
                    decimal PL_ID, 
                    string RZONE_NAME, 
                    string RZONE_NAME_ENG, 
                    System.Nullable<decimal> RZONE_X1POS, 
                    System.Nullable<decimal> RZONE_Y1POS, 
                    System.Nullable<decimal> RZONE_X2POS, 
                    System.Nullable<decimal> RZONE_Y2POS, 
                    decimal Original_RZONE_ID, 
                    decimal Original_PL_ID, 
                    string Original_RZONE_NAME, 
                    string Original_RZONE_NAME_ENG, 
                    System.Nullable<decimal> Original_RZONE_X1POS, 
                    System.Nullable<decimal> Original_RZONE_Y1POS, 
                    System.Nullable<decimal> Original_RZONE_X2POS, 
                    System.Nullable<decimal> Original_RZONE_Y2POS) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(RZONE_ID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(PL_ID));
            if ((RZONE_NAME == null)) {
                throw new System.ArgumentNullException("RZONE_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(RZONE_NAME));
            }
            if ((RZONE_NAME_ENG == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(RZONE_NAME_ENG));
            }
            if ((RZONE_X1POS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(RZONE_X1POS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((RZONE_Y1POS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(RZONE_Y1POS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((RZONE_X2POS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(RZONE_X2POS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((RZONE_Y2POS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(RZONE_Y2POS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_RZONE_ID));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_PL_ID));
            if ((Original_RZONE_NAME == null)) {
                throw new System.ArgumentNullException("Original_RZONE_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_RZONE_NAME));
            }
            if ((Original_RZONE_NAME_ENG == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_RZONE_NAME_ENG));
            }
            if ((Original_RZONE_X1POS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_RZONE_X1POS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_RZONE_Y1POS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(Original_RZONE_Y1POS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_RZONE_X2POS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_RZONE_X2POS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((Original_RZONE_Y2POS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_RZONE_Y2POS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ScanerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScanerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Scaner";
            tableMapping.ColumnMappings.Add("SCAN_ID", "ScanId");
            tableMapping.ColumnMappings.Add("CP_ID", "ContPointId");
            tableMapping.ColumnMappings.Add("CONT_ID", "ContId");
            tableMapping.ColumnMappings.Add("SCAN_NAME", "ScanName");
            tableMapping.ColumnMappings.Add("SCAN_TYPE", "ScanType");
            tableMapping.ColumnMappings.Add("SCAN_ADDRESS", "ScanAddress");
            tableMapping.ColumnMappings.Add("SCAN_XPOS", "ScanPosX");
            tableMapping.ColumnMappings.Add("SCAN_DATA_PORT", "ScanDataPort");
            tableMapping.ColumnMappings.Add("SCAN_YPOS", "ScanPosY");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""REW_SCANER"" WHERE ((""SCAN_ID"" = :Original_SCAN_ID) AND (""CP_ID"" = :Original_CP_ID) AND (""CONT_ID"" = :Original_CONT_ID) AND (""SCAN_NAME"" = :Original_SCAN_NAME) AND (""SCAN_TYPE"" = :Original_SCAN_TYPE) AND (""SCAN_ADDRESS"" = :Original_SCAN_ADDRESS) AND ((:IsNull_SCAN_XPOS = 1 AND ""SCAN_XPOS"" IS NULL) OR (""SCAN_XPOS"" = :Original_SCAN_XPOS)) AND ((:IsNull_SCAN_YPOS = 1 AND ""SCAN_YPOS"" IS NULL) OR (""SCAN_YPOS"" = :Original_SCAN_YPOS)) AND ((:IsNull_SCAN_DATA_PORT = 1 AND ""SCAN_DATA_PORT"" IS NULL) OR (""SCAN_DATA_PORT"" = :Original_SCAN_DATA_PORT)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "SCAN_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_TYPE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_ADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_ADDRESS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SCAN_XPOS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SCAN_XPOS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_XPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_XPOS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SCAN_YPOS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SCAN_YPOS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_YPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_YPOS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SCAN_DATA_PORT", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SCAN_DATA_PORT", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_DATA_PORT", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_DATA_PORT", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""REW_SCANER"" (""SCAN_ID"", ""CP_ID"", ""CONT_ID"", ""SCAN_NAME"", ""SCAN_TYPE"", ""SCAN_ADDRESS"", ""SCAN_XPOS"", ""SCAN_YPOS"", ""SCAN_DATA_PORT"") VALUES (:SCAN_ID, :CP_ID, :CONT_ID, :SCAN_NAME, :SCAN_TYPE, :SCAN_ADDRESS, :SCAN_XPOS, :SCAN_YPOS, :SCAN_DATA_PORT)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "SCAN_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_TYPE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_ADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_ADDRESS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_XPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_XPOS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_YPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_YPOS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_DATA_PORT", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_DATA_PORT", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""REW_SCANER"" SET ""SCAN_ID"" = :SCAN_ID, ""CP_ID"" = :CP_ID, ""CONT_ID"" = :CONT_ID, ""SCAN_NAME"" = :SCAN_NAME, ""SCAN_TYPE"" = :SCAN_TYPE, ""SCAN_ADDRESS"" = :SCAN_ADDRESS, ""SCAN_XPOS"" = :SCAN_XPOS, ""SCAN_YPOS"" = :SCAN_YPOS, ""SCAN_DATA_PORT"" = :SCAN_DATA_PORT WHERE ((""SCAN_ID"" = :Original_SCAN_ID) AND (""CP_ID"" = :Original_CP_ID) AND (""CONT_ID"" = :Original_CONT_ID) AND (""SCAN_NAME"" = :Original_SCAN_NAME) AND (""SCAN_TYPE"" = :Original_SCAN_TYPE) AND (""SCAN_ADDRESS"" = :Original_SCAN_ADDRESS) AND ((:IsNull_SCAN_XPOS = 1 AND ""SCAN_XPOS"" IS NULL) OR (""SCAN_XPOS"" = :Original_SCAN_XPOS)) AND ((:IsNull_SCAN_YPOS = 1 AND ""SCAN_YPOS"" IS NULL) OR (""SCAN_YPOS"" = :Original_SCAN_YPOS)) AND ((:IsNull_SCAN_DATA_PORT = 1 AND ""SCAN_DATA_PORT"" IS NULL) OR (""SCAN_DATA_PORT"" = :Original_SCAN_DATA_PORT)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "SCAN_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_TYPE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_ADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_ADDRESS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_XPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_XPOS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_YPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_YPOS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCAN_DATA_PORT", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_DATA_PORT", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "SCAN_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_TYPE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_ADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_ADDRESS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SCAN_XPOS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SCAN_XPOS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_XPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_XPOS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SCAN_YPOS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SCAN_YPOS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_YPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_YPOS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SCAN_DATA_PORT", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SCAN_DATA_PORT", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCAN_DATA_PORT", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCAN_DATA_PORT", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::PlantConfig.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     SCAN_ID, CP_ID, CONT_ID, SCAN_NAME, SCAN_TYPE, SCAN_ADDRESS, SCAN_XPOS" +
                ", SCAN_YPOS, SCAN_DATA_PORT\r\nFROM         REW_SCANER";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDataSet.ScanerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDataSet.ScanerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDataSet.ScanerDataTable dataTable = new ReworksDataSet.ScanerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet.ScanerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Scaner");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_SCAN_ID, decimal Original_CP_ID, decimal Original_CONT_ID, string Original_SCAN_NAME, decimal Original_SCAN_TYPE, decimal Original_SCAN_ADDRESS, System.Nullable<decimal> Original_SCAN_XPOS, System.Nullable<decimal> Original_SCAN_YPOS, System.Nullable<decimal> Original_SCAN_DATA_PORT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_SCAN_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_CP_ID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_CONT_ID));
            if ((Original_SCAN_NAME == null)) {
                throw new System.ArgumentNullException("Original_SCAN_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_SCAN_NAME));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_SCAN_TYPE));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_SCAN_ADDRESS));
            if ((Original_SCAN_XPOS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_SCAN_XPOS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Original_SCAN_YPOS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_SCAN_YPOS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Original_SCAN_DATA_PORT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_SCAN_DATA_PORT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal SCAN_ID, decimal CP_ID, decimal CONT_ID, string SCAN_NAME, decimal SCAN_TYPE, decimal SCAN_ADDRESS, System.Nullable<decimal> SCAN_XPOS, System.Nullable<decimal> SCAN_YPOS, System.Nullable<decimal> SCAN_DATA_PORT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(SCAN_ID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(CP_ID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(CONT_ID));
            if ((SCAN_NAME == null)) {
                throw new System.ArgumentNullException("SCAN_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(SCAN_NAME));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(SCAN_TYPE));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(SCAN_ADDRESS));
            if ((SCAN_XPOS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(SCAN_XPOS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((SCAN_YPOS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(SCAN_YPOS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((SCAN_DATA_PORT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(SCAN_DATA_PORT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal SCAN_ID, 
                    decimal CP_ID, 
                    decimal CONT_ID, 
                    string SCAN_NAME, 
                    decimal SCAN_TYPE, 
                    decimal SCAN_ADDRESS, 
                    System.Nullable<decimal> SCAN_XPOS, 
                    System.Nullable<decimal> SCAN_YPOS, 
                    System.Nullable<decimal> SCAN_DATA_PORT, 
                    decimal Original_SCAN_ID, 
                    decimal Original_CP_ID, 
                    decimal Original_CONT_ID, 
                    string Original_SCAN_NAME, 
                    decimal Original_SCAN_TYPE, 
                    decimal Original_SCAN_ADDRESS, 
                    System.Nullable<decimal> Original_SCAN_XPOS, 
                    System.Nullable<decimal> Original_SCAN_YPOS, 
                    System.Nullable<decimal> Original_SCAN_DATA_PORT) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(SCAN_ID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(CP_ID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(CONT_ID));
            if ((SCAN_NAME == null)) {
                throw new System.ArgumentNullException("SCAN_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(SCAN_NAME));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(SCAN_TYPE));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(SCAN_ADDRESS));
            if ((SCAN_XPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(SCAN_XPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((SCAN_YPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(SCAN_YPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((SCAN_DATA_PORT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(SCAN_DATA_PORT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_SCAN_ID));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(Original_CP_ID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(Original_CONT_ID));
            if ((Original_SCAN_NAME == null)) {
                throw new System.ArgumentNullException("Original_SCAN_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_SCAN_NAME));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(Original_SCAN_TYPE));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_SCAN_ADDRESS));
            if ((Original_SCAN_XPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(Original_SCAN_XPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_SCAN_YPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_SCAN_YPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((Original_SCAN_DATA_PORT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_SCAN_DATA_PORT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SensorTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SensorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Sensor";
            tableMapping.ColumnMappings.Add("SENS_ID", "SensId");
            tableMapping.ColumnMappings.Add("CP_ID", "ContPointId");
            tableMapping.ColumnMappings.Add("CONT_ID", "ContId");
            tableMapping.ColumnMappings.Add("SENS_TYPE", "SensType");
            tableMapping.ColumnMappings.Add("SENS_ADDRESS", "SensAddress");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"REW_SENSOR\" WHERE ((\"SENS_ID\" = :Original_SENS_ID) AND (\"CP_ID\" = :O" +
                "riginal_CP_ID) AND (\"CONT_ID\" = :Original_CONT_ID) AND (\"SENS_TYPE\" = :Original_" +
                "SENS_TYPE) AND (\"SENS_ADDRESS\" = :Original_SENS_ADDRESS))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SENS_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SENS_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SENS_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SENS_TYPE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SENS_ADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SENS_ADDRESS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"REW_SENSOR\" (\"SENS_ID\", \"CP_ID\", \"CONT_ID\", \"SENS_TYPE\", \"SENS_ADDRE" +
                "SS\") VALUES (:SENS_ID, :CP_ID, :CONT_ID, :SENS_TYPE, :SENS_ADDRESS)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SENS_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SENS_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SENS_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SENS_TYPE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SENS_ADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SENS_ADDRESS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""REW_SENSOR"" SET ""SENS_ID"" = :SENS_ID, ""CP_ID"" = :CP_ID, ""CONT_ID"" = :CONT_ID, ""SENS_TYPE"" = :SENS_TYPE, ""SENS_ADDRESS"" = :SENS_ADDRESS WHERE ((""SENS_ID"" = :Original_SENS_ID) AND (""CP_ID"" = :Original_CP_ID) AND (""CONT_ID"" = :Original_CONT_ID) AND (""SENS_TYPE"" = :Original_SENS_TYPE) AND (""SENS_ADDRESS"" = :Original_SENS_ADDRESS))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SENS_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SENS_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SENS_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SENS_TYPE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SENS_ADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SENS_ADDRESS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SENS_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SENS_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CP_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CP_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_CONT_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "CONT_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SENS_TYPE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SENS_TYPE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SENS_ADDRESS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SENS_ADDRESS", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::PlantConfig.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SENS_ID, CP_ID, CONT_ID, SENS_TYPE, SENS_ADDRESS FROM REW_SENSOR";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDataSet.SensorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDataSet.SensorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDataSet.SensorDataTable dataTable = new ReworksDataSet.SensorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet.SensorDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Sensor");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_SENS_ID, decimal Original_CP_ID, decimal Original_CONT_ID, decimal Original_SENS_TYPE, decimal Original_SENS_ADDRESS) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_SENS_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_CP_ID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_CONT_ID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_SENS_TYPE));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_SENS_ADDRESS));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal SENS_ID, decimal CP_ID, decimal CONT_ID, decimal SENS_TYPE, decimal SENS_ADDRESS) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(SENS_ID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(CP_ID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(CONT_ID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(SENS_TYPE));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(SENS_ADDRESS));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal SENS_ID, decimal CP_ID, decimal CONT_ID, decimal SENS_TYPE, decimal SENS_ADDRESS, decimal Original_SENS_ID, decimal Original_CP_ID, decimal Original_CONT_ID, decimal Original_SENS_TYPE, decimal Original_SENS_ADDRESS) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(SENS_ID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(CP_ID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(CONT_ID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(SENS_TYPE));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(SENS_ADDRESS));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_SENS_ID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_CP_ID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_CONT_ID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_SENS_TYPE));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_SENS_ADDRESS));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TerminalTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TerminalTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Terminal";
            tableMapping.ColumnMappings.Add("TERM_ID", "TermId");
            tableMapping.ColumnMappings.Add("RZONE_ID", "RepZoneId");
            tableMapping.ColumnMappings.Add("TERM_NAME", "TermName");
            tableMapping.ColumnMappings.Add("TERM_IP", "TermIp");
            tableMapping.ColumnMappings.Add("TERM_XPOS", "TermPosX");
            tableMapping.ColumnMappings.Add("TERM_YPOS", "TermPosY");
            tableMapping.ColumnMappings.Add("TERM_MODE", "TermMode");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""REW_TERMINAL"" WHERE ((""TERM_ID"" = :Original_TERM_ID) AND (""RZONE_ID"" = :Original_RZONE_ID) AND (""TERM_NAME"" = :Original_TERM_NAME) AND (""TERM_IP"" = :Original_TERM_IP) AND ((:IsNull_TERM_XPOS = 1 AND ""TERM_XPOS"" IS NULL) OR (""TERM_XPOS"" = :Original_TERM_XPOS)) AND ((:IsNull_TERM_YPOS = 1 AND ""TERM_YPOS"" IS NULL) OR (""TERM_YPOS"" = :Original_TERM_YPOS)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_TERM_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "TERM_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_TERM_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "TERM_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_TERM_IP", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "TERM_IP", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_TERM_XPOS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "TERM_XPOS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_TERM_XPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "TERM_XPOS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_TERM_YPOS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "TERM_YPOS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_TERM_YPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "TERM_YPOS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"REW_TERMINAL\" (\"TERM_ID\", \"RZONE_ID\", \"TERM_NAME\", \"TERM_IP\", \"TERM_" +
                "XPOS\", \"TERM_YPOS\") VALUES (:TERM_ID, :RZONE_ID, :TERM_NAME, :TERM_IP, :TERM_XPO" +
                "S, :TERM_YPOS)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("TERM_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "TERM_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("TERM_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "TERM_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("TERM_IP", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "TERM_IP", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("TERM_XPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "TERM_XPOS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("TERM_YPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "TERM_YPOS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""REW_TERMINAL"" SET ""TERM_ID"" = :TERM_ID, ""RZONE_ID"" = :RZONE_ID, ""TERM_NAME"" = :TERM_NAME, ""TERM_IP"" = :TERM_IP, ""TERM_XPOS"" = :TERM_XPOS, ""TERM_YPOS"" = :TERM_YPOS WHERE ((""TERM_ID"" = :Original_TERM_ID) AND (""RZONE_ID"" = :Original_RZONE_ID) AND (""TERM_NAME"" = :Original_TERM_NAME) AND (""TERM_IP"" = :Original_TERM_IP) AND ((:IsNull_TERM_XPOS = 1 AND ""TERM_XPOS"" IS NULL) OR (""TERM_XPOS"" = :Original_TERM_XPOS)) AND ((:IsNull_TERM_YPOS = 1 AND ""TERM_YPOS"" IS NULL) OR (""TERM_YPOS"" = :Original_TERM_YPOS)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("TERM_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "TERM_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RZONE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_ID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("TERM_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "TERM_NAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("TERM_IP", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "TERM_IP", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("TERM_XPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "TERM_XPOS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("TERM_YPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "TERM_YPOS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_TERM_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "TERM_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RZONE_ID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RZONE_ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_TERM_NAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "TERM_NAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_TERM_IP", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "TERM_IP", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_TERM_XPOS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "TERM_XPOS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_TERM_XPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "TERM_XPOS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_TERM_YPOS", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "TERM_YPOS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_TERM_YPOS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "TERM_YPOS", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::PlantConfig.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TERM_ID, RZONE_ID, TERM_NAME, TERM_IP, TERM_XPOS, TERM_YPOS FROM REW_TERMI" +
                "NAL";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDataSet.TerminalDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDataSet.TerminalDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDataSet.TerminalDataTable dataTable = new ReworksDataSet.TerminalDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet.TerminalDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Terminal");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_TERM_ID, decimal Original_RZONE_ID, string Original_TERM_NAME, string Original_TERM_IP, System.Nullable<decimal> Original_TERM_XPOS, System.Nullable<decimal> Original_TERM_YPOS) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_TERM_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_RZONE_ID));
            if ((Original_TERM_NAME == null)) {
                throw new System.ArgumentNullException("Original_TERM_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TERM_NAME));
            }
            if ((Original_TERM_IP == null)) {
                throw new System.ArgumentNullException("Original_TERM_IP");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_TERM_IP));
            }
            if ((Original_TERM_XPOS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_TERM_XPOS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_TERM_YPOS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_TERM_YPOS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal TERM_ID, decimal RZONE_ID, string TERM_NAME, string TERM_IP, System.Nullable<decimal> TERM_XPOS, System.Nullable<decimal> TERM_YPOS) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(TERM_ID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(RZONE_ID));
            if ((TERM_NAME == null)) {
                throw new System.ArgumentNullException("TERM_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TERM_NAME));
            }
            if ((TERM_IP == null)) {
                throw new System.ArgumentNullException("TERM_IP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TERM_IP));
            }
            if ((TERM_XPOS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(TERM_XPOS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((TERM_YPOS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(TERM_YPOS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal TERM_ID, decimal RZONE_ID, string TERM_NAME, string TERM_IP, System.Nullable<decimal> TERM_XPOS, System.Nullable<decimal> TERM_YPOS, decimal Original_TERM_ID, decimal Original_RZONE_ID, string Original_TERM_NAME, string Original_TERM_IP, System.Nullable<decimal> Original_TERM_XPOS, System.Nullable<decimal> Original_TERM_YPOS) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(TERM_ID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(RZONE_ID));
            if ((TERM_NAME == null)) {
                throw new System.ArgumentNullException("TERM_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TERM_NAME));
            }
            if ((TERM_IP == null)) {
                throw new System.ArgumentNullException("TERM_IP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TERM_IP));
            }
            if ((TERM_XPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(TERM_XPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((TERM_YPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(TERM_YPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_TERM_ID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_RZONE_ID));
            if ((Original_TERM_NAME == null)) {
                throw new System.ArgumentNullException("Original_TERM_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_TERM_NAME));
            }
            if ((Original_TERM_IP == null)) {
                throw new System.ArgumentNullException("Original_TERM_IP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_TERM_IP));
            }
            if ((Original_TERM_XPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(Original_TERM_XPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Original_TERM_YPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(Original_TERM_YPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591